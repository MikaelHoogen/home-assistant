utility_meter:
  diskmaskin_timme:
    unique_id: diskmaskin_timme
    source: sensor.diskmaskin_consumption
    cycle: hourly
  diskmaskin_dag:
    unique_id: diskmaskin_dag
    source: sensor.diskmaskin_consumption
    cycle: daily
  diskmaskin_vecka:
    unique_id: diskmaskin_vecka
    source: sensor.diskmaskin_consumption
    cycle: weekly
  diskmaskin_manad:
    unique_id: diskmaskin_manad
    source: sensor.diskmaskin_consumption
    cycle: monthly
  diskmaskin_ar:
    unique_id: diskmaskin_ar
    source: sensor.diskmaskin_consumption
    cycle: yearly
#
  diskmaskin_timme_from:
    unique_id: diskmaskin_timme_from
    source: sensor.diskmaskin_consumption
    periodically_resetting: false
    cycle: hourly
    tariffs:
      - grid
      - solar
  diskmaskin_manad_from:
    unique_id: diskmaskin_manad_from
    source: sensor.diskmaskin_consumption
    periodically_resetting: false
    cycle: monthly
    tariffs:
      - grid
      - solar
#
  test_energy_grid:
    unique_id: test_energy_grid
    source: sensor.all_light_energy
    periodically_resetting: false
    cycle: hourly
    tariffs:
      - grid
      - solar
#
#
  diskmaskin_dag_kostnad:
    unique_id: diskmaskin_dag_kostnad
    source: sensor.diskmaskin_timme_kostnad
    cycle: daily
  diskmaskin_manad_kostnad:
    unique_id: diskmaskin_manad_kostnad
    source: sensor.diskmaskin_timme_kostnad
    cycle: monthly
  diskmaskin_ar_kostnad:
    unique_id: diskmaskin_ar_kostnad
    source: sensor.diskmaskin_timme_kostnad
    cycle: yearly
#
#
template:
  - sensor:
      # Diskmaskin
      - name: diskmaskin_timme_kostnad
        unique_id: diskmaskin_timme_kostnad
        unit_of_measurement: "SEK"
        device_class: monetary
        availability: "{{ is_number(states('sensor.diskmaskin_timme_from_grid')) and is_number(states('sensor.elpris_totalt_sek')) }}"
        state: "{{ ( states('sensor.diskmaskin_timme_from_grid') | float(0.0) * states('sensor.elpris_totalt_sek') | float(0.0) ) | round(3) }}"
#
#     # Medelpris
      - name: diskmaskin_average_price
        unique_id: diskmaskin_average_price
        unit_of_measurement: "SEK/kWh"
        state_class: measurement
        availability: "{{ is_number(states('sensor.diskmaskin_manad_kostnad')) and states('sensor.diskmaskin_manad_from_grid') | float(0.0) > 0 }}"
        state: "{{ ( states('sensor.diskmaskin_manad_kostnad') | float(0.0) / states('sensor.diskmaskin_manad_from_grid') | float(0.0) ) | round(2) }}"
        #
#
  - binary_sensor:
      - name: diskmaskin
        unique_id: diskmaskin
        delay_off:
          minutes: 5
        delay_on:
          seconds: 30
        state: >
          {{ states('sensor.diskmaskin_power') | float > 1 }}
#
#
automation:
  - alias: Diskmaskin klar
    id: Diskmaskin klar
    trigger:
      platform: state
      entity_id: binary_sensor.diskmaskin
      from: "on"
      to: "off"
    action:
    - service: persistent_notification.create
      data_template:
        message: "Diskmaskin"
        title: "Diskmaskinen är klar"
    - service: notify.mobile_app_sm_n975f
      data_template:
        message: "Diskmaskin klar"
        title: "Diskmaskinen är klar"
    - service: notify.mobile_app_sm_g998b
      data_template:
        message: "Diskmaskin klar"
        title: "Diskmaskinen är klar"
#
#
  - alias: Diskmaskin energikalla
    id: Diskmaskin energikalla
    trigger:
      - platform: state
        to: 'on'
        entity_id:
          - binary_sensor.power_from_grid
        variables:
          tariff: "grid"
      - platform: state
        to: 'off'
        entity_id:
          - binary_sensor.power_from_grid
        variables:
          tariff: "solar"
    action:
      - service: select.select_option
        target:
          entity_id: select.diskmaskin_timme_from
        data:
          option: "{{ tariff }}"
#
      - service: select.select_option
        target:
          entity_id: select.diskmaskin_manad_from
        data:
          option: "{{ tariff }}"
#
#
  - alias: Test energikalla
    id: Test energikalla
    trigger:
      - platform: state
        to: 'on'
        entity_id:
          - binary_sensor.power_from_grid
        variables:
          tariff: "grid"
      - platform: state
        to: 'off'
        entity_id:
          - binary_sensor.power_from_grid
        variables:
          tariff: "solar"
    action:
      - service: select.select_option
        target:
          entity_id: select.test_energy_grid
        data:
          option: "{{ tariff }}"