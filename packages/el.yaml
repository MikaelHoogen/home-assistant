utility_meter:
#
# Förbrukning
  accumulated_consumption_day_sannesholma_2181:
    unique_id: accumulated_consumption_day_sannesholma_2181
    source: sensor.accumulated_consumption_sannesholma_2181
    cycle: daily
  accumulated_consumption_week_sannesholma_2181:
    unique_id: accumulated_consumption_week_sannesholma_2181
    source: sensor.accumulated_consumption_sannesholma_2181
    cycle: weekly
  accumulated_consumption_month_sannesholma_2181:
    unique_id: accumulated_consumption_month_sannesholma_2181
    source: sensor.accumulated_consumption_sannesholma_2181
    cycle: monthly
  accumulated_consumption_year_sannesholma_2181:
    unique_id: accumulated_consumption_year_sannesholma_2181
    source: sensor.accumulated_consumption_sannesholma_2181
    cycle: yearly
#
# Kostnad från tibber
  accumulated_cost_hour_sannesholma_2181:
    unique_id: accumulated_cost_hour_sannesholma_2181
    source: sensor.accumulated_cost_sannesholma_2181
    cycle: hourly
  accumulated_cost_day_sannesholma_2181:
    unique_id: accumulated_cost_day_sannesholma_2181
    source: sensor.accumulated_cost_sannesholma_2181
    cycle: daily
  accumulated_cost_week_sannesholma_2181:
    unique_id: accumulated_cost_week_sannesholma_2181
    source: sensor.accumulated_cost_sannesholma_2181
    cycle: weekly
  accumulated_cost_month_sannesholma_2181:
    unique_id: accumulated_cost_month_sannesholma_2181
    source: sensor.accumulated_cost_sannesholma_2181
    cycle: monthly
  accumulated_cost_year_sannesholma_2181:
    unique_id: accumulated_cost_year_sannesholma_2181
    source: sensor.accumulated_cost_sannesholma_2181
    cycle: yearly
#
# Total kostnad
  accumulated_cost_total_day_sannesholma_2181:
    unique_id: accumulated_cost_total_day_sannesholma_2181
    source: sensor.accumulated_total_cost_hour
    cycle: daily
  accumulated_cost_total_week_sannesholma_2181:
    unique_id: accumulated_cost_total_week_sannesholma_2181
    source: sensor.accumulated_total_cost_hour
    cycle: weekly
#
#
#
# Självförbrukning Sol
  solar_energy_self_usage_hour:
    unique_id: solar_energy_self_usage_hour
    source: sensor.solar_energy_self_usage
    cycle: hourly
#
# Avkastning Sol
  #
  solar_accumulated_total_return_month:
    unique_id: solar_accumulated_total_return_month
    source: sensor.solar_accumulated_total_return_day
    cycle: monthly
  #
  ### Total spar
  solar_accumulated_total_savings_day:
    unique_id: solar_accumulated_total_savings_day
    source: sensor.solar_accumulated_total_savings_hour
    cycle: daily
  #
  solar_accumulated_total_savings_month:
    unique_id: solar_accumulated_total_savings_month
    source: sensor.solar_accumulated_total_savings_hour
    cycle: monthly
  #
  ### Total förtjänst
  solar_accumulated_total_earnings_month:
    unique_id: solar_accumulated_total_earnings_month
    source: sensor.solar_accumulated_total_earnings_day
    cycle: monthly
# 
#
template:
  - trigger:
      - platform: state
        entity_id: sensor.fronius_total_energy
      - platform: state
        entity_id: sensor.last_meter_production_sannesholma_2181
      ### Självförbrukad energi från solceller
    sensor:
      - name: solar_energy_self_usage
        unique_id: solar_energy_self_usage
        unit_of_measurement: kWh
        state_class: measurement
        availability: >
          {{ is_number(states('sensor.fronius_total_energy')) and is_number(states('sensor.last_meter_production_sannesholma_2181')) }}
        state: >
          {% if states('sensor.solar_energy_self_usage') | float(0) < ( states('sensor.fronius_total_energy') | float(0) - states('sensor.last_meter_production_sannesholma_2181') | float(0) ) %}
          {{ ( states('sensor.fronius_total_energy') | float('not_a_number') - states('sensor.last_meter_production_sannesholma_2181') | float('not_a_number') ) | round(3)}}
          {% else %}
          {{ states('sensor.solar_energy_self_usage') | float('not_a_number') | round(3)}}
          {% endif %}
    #
    # El tas från elnät
  - binary_sensor:
    #
      - name: power_from_grid
        unique_id: power_from_grid
        availability: "{{ is_number(states('sensor.power_sannesholma_2181')) }}"
        state: "{{ states('sensor.power_sannesholma_2181') | float('naan') > 0}}"
  #
  - sensor:
    #
    ### Effektförbrukning
    - name: power_usage
      unique_id: power_usage
      unit_of_measurement: W
      state_class: measurement
      availability: >
        {{ is_number(states('sensor.power_production_sannesholma_2181')) and is_number(states('sensor.power_sannesholma_2181')) and is_number(states('sensor.solar_power_photovoltaics')) }}
      state: >
        {{ ( states('sensor.solar_power_photovoltaics') | float('not_a_number')
        + states('sensor.power_sannesholma_2181') | float('not_a_number')
        - states('sensor.power_production_sannesholma_2181') | float('not_a_number') ) | round(0) }}
    #

    ### Självförbrukad effekt från solceller
    - name: solar_power_self_usage
      unique_id: solar_power_self_usage
      unit_of_measurement: W
      state_class: measurement
      availability: >
        {{ is_number(states('sensor.power_production_sannesholma_2181')) and is_number(states('sensor.solar_power_photovoltaics')) }}
      state: >
        {{ ( states('sensor.solar_power_photovoltaics') | float('not_a_number')
        - states('sensor.power_production_sannesholma_2181') | float('not_a_number') ) | round(0) }}
    #
    ### Total avkastning
    - name: solar_accumulated_total_return_day
      unique_id: solar_accumulated_total_return_day
      unit_of_measurement: "SEK"
      state_class: total_increasing
      availability: "{{ is_number(states('sensor.solar_accumulated_total_savings_day')) and is_number(states('sensor.solar_accumulated_total_earnings_day')) }}"
      state: "{{ ( states('sensor.solar_accumulated_total_savings_day') | float('not_a_number') + states('sensor.solar_accumulated_total_earnings_day') | float('not_a_number') ) | round(3) }}"
#
    ### Total spar
    - name: solar_accumulated_total_savings_hour
      unique_id: solar_accumulated_total_savings_hour
      unit_of_measurement: "SEK"
      state_class: total_increasing
      availability: "{{ is_number(states('sensor.solar_energy_self_usage_hour')) and is_number(states('sensor.elpris_totalt_sek')) }}"
      state: "{{ ( states('sensor.solar_energy_self_usage_hour') | float('not_a_number') * states('sensor.elpris_totalt_sek') | float('not_a_number') ) | round(3) }}"
    #
    ### Total förtjänst
    - name: solar_accumulated_total_earnings_day
      unique_id: solar_accumulated_total_earnings_day
      unit_of_measurement: "SEK"
      state_class: total_increasing
      availability: "{{ is_number(states('sensor.accumulated_reward_sannesholma_2181')) and is_number(states('sensor.accumulated_production_sannesholma_2181')) }}"
      state: "{{ ( states ('sensor.accumulated_reward_sannesholma_2181') | float('not_a_number') + states('sensor.accumulated_production_sannesholma_2181') | float('not_a_number') * 0.6 ) | round(3) }}"
    #
    ### Total Kostnad
    - name: accumulated_total_cost_hour
      unique_id: accumulated_total_cost_hour
      unit_of_measurement: "SEK"
      state_class: total_increasing
      availability: "{{ is_number(states('sensor.accumulated_consumption_current_hour_sannesholma_2181')) and is_number(states('sensor.elpris_totalt_sek')) }}"
      state: "{{ ( states('sensor.accumulated_consumption_current_hour_sannesholma_2181') | float('not_a_number') * states('sensor.elpris_totalt_sek') | float('not_a_number') ) | round(3) }}"
    #
    # Total kostnad månad
    - name: accumulated_total_cost_month
      unique_id: accumulated_total_cost_month
      unit_of_measurement: "SEK"
      state_class: total_increasing
      availability: "{{ is_number(states('sensor.monthly_cost_sannesholma_2181')) and is_number(states('sensor.monthly_net_consumption_sannesholma_2181')) and is_number(states('sensor.elpris_grid')) }}"
      state: >
        {{ ( states ('sensor.monthly_cost_sannesholma_2181') | float('not_a_number') + states('sensor.monthly_net_consumption_sannesholma_2181') | float('not_a_number') * states('sensor.elpris_grid') | float('not_a_number') ) | round(3) }}
    #
    # Total kostnad elnät månad
    - name: accumulated_total_cost_grid_month
      unique_id: accumulated_total_cost_grid_month
      unit_of_measurement: "SEK"
      state_class: total_increasing
      availability: "{{ is_number(states('sensor.monthly_net_consumption_sannesholma_2181')) and is_number(states('sensor.avgift_elnat')) and is_number(states('sensor.avgift_energiskatt')) }}"
      state: >
        {{ ( states('sensor.monthly_net_consumption_sannesholma_2181') | float('not_a_number') * ( ( states('sensor.avgift_elnat') | float('naan') / 100 + states('sensor.avgift_energiskatt') | float('naan') / 100 ) ) ) | round(3) }}
    #
    # Total besparing, behöver göras om
    - name: accumulated_total_savings_month
      unique_id: accumulated_total_savings_month
      unit_of_measurement: SEK
      state_class: total_increasing
      availability: " {{ is_number(states('sensor.accumulated_total_cost_month')) and is_number(states('sensor.monthly_net_consumption_sannesholma_2181')) and is_number(states('sensor.elpris_totalt_medel')) }}"
      state: >
        {{ ( states('sensor.monthly_net_consumption_sannesholma_2181') | float('not_a_number') * states('sensor.elpris_totalt_medel') | float('not_a_number') - states('sensor.accumulated_total_cost_month') | float('not_a_number') ) | round(2) }}
    #
    ### Medelpris nordpool imorgon
    #
    - name: elpris_imorgon_medel
      unique_id: elpris_imorgon_medel
      unit_of_measurement: SEK
      state_class: measurement
      availability: "{{ is_state_attr('sensor.elpris', 'tomorrow_valid', True) and state_attr('sensor.elpris', 'tomorrow')[0] != None }}"
      state: "{{ ( state_attr('sensor.elpris', 'tomorrow') | sum / 24 ) | round(3)}}"
    ### Maxpris nordpool imorgon
    #
    - name: elpris_imorgon_max
      unique_id: elpris_imorgon_max
      unit_of_measurement: SEK
      state_class: measurement
      availability: "{{ is_state_attr('sensor.elpris', 'tomorrow_valid', True) and state_attr('sensor.elpris', 'tomorrow')[0] != None }}"
      state: "{{ (state_attr('sensor.elpris', 'tomorrow') | sort(reverse=true))[0] }}"
    #
#
####################### Medelpriser ##########################################################
#
    ### Medel med moms och påslag förra månaden
    - name: average_price_last_month
      unique_id: average_price_last_month
      unit_of_measurement: "SEK/kWh"
      state_class: measurement
      state: "{{ ( state_attr('sensor.accumulated_cost_month_sannesholma_2181', 'last_period') | float(0.0) / state_attr('sensor.accumulated_consumption_month_sannesholma_2181', 'last_period') | float(0.0) ) | round(2) }}"
    #
    ### Medel tibber
    - name: average_price_consumption_tibber
      unique_id: average_price_consumption_tibber
      unit_of_measurement: "SEK/kWh"
      state_class: measurement
      availability: "{{ is_number(states('sensor.monthly_cost_sannesholma_2181')) and is_number(states('sensor.monthly_net_consumption_sannesholma_2181')) }}"
      state: "{{ ( states('sensor.monthly_cost_sannesholma_2181') | float('naan') / states('sensor.monthly_net_consumption_sannesholma_2181') | float('naan') ) | round(2) }}"
    #
    # Medel totalt
    - name: average_total_price_new
      unique_id: average_total_price_new
      unit_of_measurement: "SEK/kWh"
      state_class: measurement
      availability: "{{ is_number(states('sensor.accumulated_total_cost_month')) and is_number(states('sensor.monthly_net_consumption_sannesholma_2181')) }}"
      state: "{{ ( states('sensor.accumulated_total_cost_month') | float('naan') / states('sensor.monthly_net_consumption_sannesholma_2181') | float('naan') ) | round(2) }}"
    #
      #
####### Avfuktare ##########################################################################
    - name: avfuktare_average_price
      unique_id: avfuktare_average_price
      unit_of_measurement: "SEK/kWh"
      state_class: measurement
      availability: "{{ is_number(states('sensor.avfuktare_manad_kostnad')) and states('sensor.avfuktare_manad_from_grid') | float(0.0) > 0 }}"
      state: "{{ ( states('sensor.avfuktare_manad_kostnad') | float(0.0) / states('sensor.avfuktare_manad_from_grid') | float(0.0) ) | round(2) }}"
      #
      # Snickarboa värmare ##########################################################################
    - name: snickarboa_heater_average_price
      unique_id: snickarboa_heater_average_price
      unit_of_measurement: "SEK/kWh"
      state_class: measurement
      availability: "{{ is_number(states('sensor.snickarboa_heater_manad_kostnad')) and states('sensor.snickarboa_heater_manad_from_grid') | float(0.0) > 0 }}"
      state: "{{ ( states('sensor.snickarboa_heater_manad_kostnad') | float(0.0) / states('sensor.snickarboa_heater_manad_from_grid') | float(0.0) ) | round(2) }}"
      #
      #

homeassistant:
  customize:
    sensor.accumulated_consumption_sannesholma_2181:
      state_class: total_increasing
    sensor.electricity_price_sannesholma_2181:
      state_class: measurement
    sensor.elpris:
      state_class: measurement
    #