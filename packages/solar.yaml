#
template:
  - sensor:
      - name: solar_battery_charging
        unique_id: solar_battery_charging
        unit_of_measurement: W
        device_class: power
        state: >
          {{ max(0, 0 - states('sensor.solar_effekt_batteri') | float(0)) }}
      #
      - name: solar_battery_discharging
        unique_id: solar_battery_discharging
        unit_of_measurement: W
        device_class: power
        state: >
          {{ max(0, states('sensor.solar_effekt_batteri') | float(0)) }}
#
      - name: solar_battery_charging_from_solar
        unique_id: solar_battery_charging_from_solar
        unit_of_measurement: W
        device_class: power
        availability: >
          {{ is_number(states('sensor.solar_power_photovoltaics')) }}
        state: >
          {% if states('sensor.solar_power_photovoltaics') | float(0) >= states('sensor.solar_battery_charging') | float(0) %}
          {{ states('sensor.solar_battery_charging') | float(0) }}
          {% else %}
          {{ states('sensor.solar_power_photovoltaics') | float(0) }}
          {% endif %}
#
      - name: solar_battery_charging_from_grid
        unique_id: solar_battery_charging_from_grid
        unit_of_measurement: W
        device_class: power
        availability: >
          {{ is_number(states('sensor.solar_power_photovoltaics')) }}
        state: >
          {{ max(0, states('sensor.solar_battery_charging') | float(0) - states('sensor.solar_power_photovoltaics') | float(0) ) }}
#
### Battery mode ###
      - name: solar_battery_mode
        unique_id: solar_battery_mode
        state: >
          {% if states('sensor.p_batt_forecast') | float(0) < 0
            and states('sensor.p_pv_forecast') | float(0) > 10
            and states('sensor.p_grid_forecast') | float(0) <= 0
            and states('sensor.soc_batt_forecast') | float(0) > states('sensor.solar_battery_soc') | float(0) %}
          charge_from_solar
          {% elif states('sensor.p_batt_forecast') | float(0) < 0
            and states('sensor.soc_batt_forecast') | float(0) > states('sensor.solar_battery_soc') | float(0) %}
          charge
          {% elif states('sensor.p_batt_forecast') | float(0) > 0
            and ( states('sensor.p_grid_forecast') | float(0) > 0
            or states('sensor.p_grid_forecast') | float(0) < -50 )
            and not is_state('sensor.ehl75l9h_status', 'charging') %}
          discharge_fixed
          {% elif states('sensor.p_batt_forecast') | float(0) > 0
            and not is_state('sensor.ehl75l9h_status', 'charging') %}
          discharge
          {% else %}
          idle
          {% endif %}
#
          # Lägg till Manual discharge
#          {% if states('sensor.p_batt_forecast') | float(0) < 0
#            and states('sensor.soc_batt_forecast') | int(0) > states('sensor.solar_battery_soc') | int(0) %}
#
sensor:
    - platform: integration
      source: sensor.solar_battery_charging
      name: solar_battery_total_charged
      unique_id: solar_battery_total_charged
      unit_prefix: k
      method: left
    #
    - platform: integration
      source: sensor.solar_battery_charging_from_solar
      name: solar_battery_total_charged_from_solar
      unique_id: solar_battery_total_charged_from_solar
      unit_prefix: k
      method: left
    #
    #
    - platform: integration
      source: sensor.solar_battery_charging_from_grid
      name: solar_battery_total_charged_from_grid
      unique_id: solar_battery_total_charged_from_grid
      unit_prefix: k
      method: left
    #
    - platform: integration
      source: sensor.solar_battery_discharging
      name: solar_battery_total_discharged
      unique_id: solar_battery_total_discharged
      unit_prefix: k
      method: left
    #
    - platform: integration
      source: sensor.solar_power_photovoltaics
      name: solar_photovoltaics_total_energy
      unique_id: solar_photovoltaics_total_energy
      unit_prefix: k
      method: left
    #
    ### Självförbrukad energi från solceller
    - platform: integration
      source: sensor.solar_power_self_usage
      name: solar_energy_self_usage
      unique_id: solar_energy_self_usage
      unit_prefix: k
      method: left
#
### Skript för att styra batteri ####
script:
  solar_battery_mode:
    #
    sequence:
      - service: modbus.write_register
        data:
          slave: 1
          # MinRsvPct
          address: 40350
          value: "{{ MinRsvPct }}"
          hub: gen24
      - service: modbus.write_register
        data:
          slave: 1
          # InWRte
          address: 40356
          value: "{{ InWRte }}"
          hub: gen24
      - service: modbus.write_register
        data:
          slave: 1
          # OutWRte
          address: 40355
          value: "{{ OutWRte }}"
          hub: gen24
      - service: modbus.write_register
        data:
          slave: 1
          # StorCTLMod
          address: 40348
          value: "{{ StorCTLMod }}"
          hub: gen24
#
  solar_battery_charge:
    sequence:
      - service: script.solar_battery_mode
        # Charge from solar
        data:
          # Only permit energy storage charging
          StorCTLMod: 2
          MinRsvPct: 2000
          # Set discharge limit of WchaMax to 0%
          OutWRte: 0
          #
          InWRte: 10000
#
  solar_battery_discharge:
    sequence:
      - service: script.solar_battery_mode
        # Discharge
        data:
          # Only permit energy storage discharging
          StorCTLMod: 1
          #MinRsvPct: "{{ states('sensor.soc_batt_forecast') | float(0) * 100 }}"
          MinRsvPct: 2000
          #
          OutWRte: 10000
          # Set charge limit of WchaMax to 0%
          InWRte: 0
#
  solar_battery_block:
    sequence:
      - service: script.solar_battery_mode
        # Do not permit charging or discharging
        data:
          # Activate both limit values
          StorCTLMod: 3
          MinRsvPct: 1000
          OutWRte: 0
          InWRte: 0
#
automation:
#
  - alias: solar_battery_mode
    id: solar_battery_mode
    trigger:
      - platform: state
        entity_id: sensor.solar_battery_mode
      - platform: state
        entity_id: sensor.p_batt_forecast
    action:
      - delay:
          seconds: 30
      - choose:
          #
          ### Charge##
          - conditions:
              - condition: state
                entity_id: sensor.solar_battery_mode
                state: "charge"
            sequence:
              - service: script.solar_battery_mode
                # Charge, InWRte positiv
                data:
                  StorCTLMod: 3
                  MinRsvPct: 2000
                  OutWRte: "{{ 65536 - (0 - states('sensor.p_batt_forecast') | int(0) / 10240 * 10000) | int(0) }}"
                  InWRte: "{{ (0 - states('sensor.p_batt_forecast') | int(0) / 10240 * 10000) | int(0) }}"
          #
          ### Charge from solar ##
          - conditions:
              - condition: state
                entity_id: sensor.solar_battery_mode
                state: "charge_from_solar"
            sequence:
              - service: script.solar_battery_mode
                # Charge from solar
                data:
                  # Only permit energy storage charging
                  StorCTLMod: 2
                  MinRsvPct: 2000
                  # Set discharge limit of WchaMax to 0%
                  OutWRte: 0
                  #
                  InWRte: 10000
          #
          ### Discharge ###
          - conditions:
              - condition: state
                entity_id: sensor.solar_battery_mode
                state: "discharge"
            sequence:
              - service: script.solar_battery_mode
                # Discharge
                data:
                  # Only permit energy storage discharging
                  StorCTLMod: 1
                  #MinRsvPct: "{{ states('sensor.soc_batt_forecast') | float(0) * 100 }}"
                  MinRsvPct: 2000
                  #
                  OutWRte: 10000
                  # Set charge limit of WchaMax to 0%
                  InWRte: 0
          #
          ### Discharge fixed ###
          - conditions:
              - condition: state
                entity_id: sensor.solar_battery_mode
                state: "discharge_fixed"
            sequence:
              - service: script.solar_battery_mode
                # Discharge fixed
                data:
                  #
                  StorCTLMod: 3
                  #
                  MinRsvPct: 2000
                  #
                  OutWRte: "{{ (states('sensor.p_batt_forecast') | int(0) / 10240 * 10000) | int(0) }}"
                  #
                  InWRte: "{{ 65536 - (states('sensor.p_batt_forecast') | int(0) / 10240 * 10000) | int(0) }}"
          #
          ### Block ###
          - conditions:
              - condition: state
                entity_id: sensor.solar_battery_mode
                state: "blocked"
            sequence:
              - service: script.solar_battery_mode
                # Do not permit charging or discharging
                data:
                  # Activate both limit values
                  StorCTLMod: 3
                  MinRsvPct: 1000
                  OutWRte: 0
                  InWRte: 0
#
          ### Idle ###
          - conditions:
              - condition: state
                entity_id: sensor.solar_battery_mode
                state: "idle"
            sequence:
              - service: script.solar_battery_mode
                # Do not permit charging or discharging
                data:
                  # Activate both limit values
                  StorCTLMod: 3
                  MinRsvPct: 1000
                  OutWRte: 0
                  InWRte: 0
#
