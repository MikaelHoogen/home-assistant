shell_command:
  trigger_nordpool_forecast: "curl -i -H \"Content-Type: application/json\" -X POST -d '{\"load_cost_forecast\":{{ state_attr('sensor.elpris_sb', 'köp') | list }},\"prod_price_forecast\":{{ state_attr('sensor.elpris_sb', 'sälj') | list }}}' http://localhost:5000/action/dayahead-optim"
  #
  trigger_nordpool_solar_forecast: "curl -i -H \"Content-Type: application/json\" -X POST -d '{\"load_cost_forecast\":{{ state_attr('sensor.elpris_sb', 'köp') | list }},\"prod_price_forecast\":{{ state_attr('sensor.elpris_sb', 'sälj') | list }},\"solar_forecast_kwp\":12.8}' http://localhost:5000/action/dayahead-optim"
  #
  trigger_solcast_forecast: "curl -i -H \"Content-Type: application/json\" -X POST -d '{\"solcast_rooftop_id\":\"{{solcast_rooftop_id}}\",\"solcast_api_key\":\"{{solcast_api_key}}\"}' http://localhost:5000/action/dayahead-optim"
  #
  trigger_nordpool_solcast_forecast: "curl -i -H \"Content-Type: application/json\" -X POST -d '{\"load_cost_forecast\":{{ state_attr('sensor.elpris_sb', 'köp') | list }},\"prod_price_forecast\":{{ state_attr('sensor.elpris_sb', 'sälj') | list }},\"solcast_rooftop_id\":\"{{solcast_rooftop_id}}\",\"solcast_api_key\":\"{{solcast_api_key}}\"}' http://localhost:5000/action/dayahead-optim"
  #
  trigger_nordpool_solcast_2_forecast: "curl -i -H \"Content-Type: application/json\" -X POST -d '{\"load_cost_forecast\":{{ state_attr('sensor.elpris_sb', 'köp') | list }},
    \"prod_price_forecast\":{{ state_attr('sensor.elpris_sb', 'sälj') | list }},
    \"pv_power_forecast\":{{ state_attr('sensor.solcast_pv_forecast', 'pv_estimate') | list }}}' http://localhost:5000/action/dayahead-optim"
  #
  publish_data: "curl -i -H \"Content-Type:application/json\" -X POST -d '{\"custom_deferrable_forecast_id\": [{\"entity_id\": \"sensor.p_deferrable0\",\"unit_of_measurement\": \"W\", \"friendly_name\": \"Värmepump\"},{\"entity_id\": \"sensor.p_deferrable1\",\"unit_of_measurement\": \"W\", \"friendly_name\": \"Deferrable Load 1\"}],
    \"custom_unit_load_cost_id\": {\"entity_id\": \"sensor.unit_load_cost\",\"unit_of_measurement\": \"SEK/kWh\", \"friendly_name\": \"Unit load cost\"},
    \"custom_unit_prod_price_id\": {\"entity_id\": \"sensor.unit_prod_price\",\"unit_of_measurement\": \"SEK/kWh\", \"friendly_name\": \"Unit prod price\"}}' http://localhost:5000/action/publish-data"
#
  emhass_machine_learn: "curl -i -H \"Content-Type:application/json\" -X POST -d '{\"model_type\": \"load_forecast\",\"days_to_retrieve\": 15, \"var_model\": \"sensor.power_sannesholma_2181_no_var_loads_filtered\"}' http://localhost:5000/action/forecast-model-fit"
#
  emhass_machine_learn_test: "curl -i -H \"Content-Type:application/json\" -X POST -d '{\"model_type\": \"load_forecast\", \"days_to_retrieve\": 15, \"var_model\": \"sensor.power_sannesholma_2181_no_var_loads_filtered\", \"model_predict_publish\": \"True\"}' http://localhost:5000/action/forecast-model-predict"

  emhass_machine_learn_predict: "curl -i -H \"Content-Type:application/json\" -X POST -d '{\"model_type\": \"load_forecast\", \"days_to_retrieve\": 15, \"var_model\": \"sensor.power_sannesholma_2181_no_var_loads_filtered\", \"model_predict_publish\": \"True\"}' http://localhost:5000/action/forecast-model-predict"
sensor:
  - platform: filter
    name: power_sannesholma_2181_no_var_loads_filtered
    unique_id: power_sannesholma_2181_no_var_loads_filtered
    entity_id: sensor.power_sannesholma_2181_no_var_loads
    filters:
      - filter: outlier
        window_size: 4
        radius: 2.0
      - filter: lowpass
        time_constant: 10
        precision: 2
#
  - platform: filter
    name: sensor.solar_power_photovoltaics_filtered
    unique_id: sensor.solar_power_photovoltaics_filtered
    entity_id: sensor.solar_power_photovoltaics
    filters:
      - filter: lowpass
        time_constant: 10
        precision: 0
#
  - platform: filter
    name: sensor.power_production_sannesholma_2181_filtered
    unique_id: sensor.power_production_sannesholma_2181_filtered
    entity_id: sensor.power_production_sannesholma_2181
    filters:
      - filter: lowpass
        time_constant: 10
        precision: 0
#
template:
  - sensor:
      # 
      - name: ehl75l9h_power_watt
        unique_id: ehl75l9h_power_watt
        availability: >
          {{ is_number(states('sensor.ehl75l9h_power')) }}
        unit_of_measurement: "W"
        state_class: measurement
        device_class: power
        state: >
          {% if is_state('sensor.ehl75l9h_status', 'charging') %}
            {{ ( states('sensor.ehl75l9h_power') | float('naan') * 1000 ) | round(0) }}
          {% else %}
            0.0
          {% endif %}
#
      - name: power_sannesholma_2181_no_var_loads
        unique_id: power_sannesholma_2181_no_var_loads
        availability: >
          {{ is_number(states('sensor.power_usage'))
          and is_number(states('sensor.heatpump_power'))
          and is_number(states('sensor.ehl75l9h_power'))
          }}
        unit_of_measurement: "W"
        state_class: measurement
        device_class: power
        state: >
          {{ ( states('sensor.power_usage') | float('naan') - states('sensor.heatpump_power') | float('naan') - states('sensor.ehl75l9h_power_watt') | float('naan') ) | round(0) }}
#
#
      - name: elpris_sb
        unique_id: elpris_sb
        state: >
          {{ states('sensor.elpris') }}
        attributes:
          sälj: >
            {% set ns = namespace(x=[]) %}
            {% for i in ((state_attr('sensor.elpris', 'raw_today') | map(attribute='value') | list + state_attr('sensor.elpris', 'raw_tomorrow') | map(attribute='value') | list))[now().hour:][:24] %}
              {% set ns.x = ns.x + [(i + 0.6 + states('sensor.elpris_natnytta') | float(0)) | round(3)] %}
              {% set ns.x = ns.x + [(i + 0.6 + states('sensor.elpris_natnytta') | float(0)) | round(3)] %}
            {% endfor %}
            {{ ns.x }}
          #
          köp: >
            {% set ns = namespace(x=[]) %}
            {% for i in ((state_attr('sensor.electricity_price_sannesholma_2181_prices', 'today') | map(attribute='total') | list + state_attr('sensor.electricity_price_sannesholma_2181_prices', 'tomorrow') | map(attribute='total') | list))[now().hour:][:24] %}
              {% set ns.x = ns.x + [(i + states('sensor.avgift_elnat') | float('naan') / 100
              + states('sensor.avgift_energiskatt') | float('naan') / 100 ) | round(3)] %}
              {% set ns.x = ns.x + [(i + states('sensor.avgift_elnat') | float('naan') / 100
              + states('sensor.avgift_energiskatt') | float('naan') / 100 ) | round(3)] %}
            {% endfor %}
            {{ ns.x }}
#
      - name: solcast_pv_forecast
        unique_id: solcast_pv_forecast
        state_class: measurement
        state: >
          {{ states('sensor.solcast_pv_forecast_forecast_today') }}
        attributes:
          pv_estimate: >
            {% set ns = namespace(x=[]) %}
            {% for i in ((state_attr('sensor.solcast_pv_forecast_forecast_today', 'detailedForecast') | map(attribute='pv_estimate') | list + state_attr('sensor.solcast_pv_forecast_forecast_tomorrow', 'detailedForecast') | map(attribute='pv_estimate') | list))[now().hour*2:][:48] %}
              {% set ns.x = ns.x + [i | round(3) * 1000 ] %}
            {% endfor %}
            {{ ns.x }}
#
      - name: p_pv_forecast_measure
        unique_id: p_pv_forecast_measure
        availability: >
          {{ is_number(states('sensor.p_pv_forecast')) }}
        unit_of_measurement: "W"
        state_class: measurement
        state: >
          {{ states('sensor.p_pv_forecast') }}
#
      - name: p_forecast
        unique_id: p_forecast
        availability: >
          {{ is_number(states('sensor.p_pv_forecast')) }}
        state: >
          {{ states('sensor.p_pv_forecast') }}
        attributes:
          date: >
            {{ state_attr('sensor.p_deferrable0', 'deferrables_schedule') | map(attribute='date') | list }}
          p_deferrable0: >
            {{ state_attr('sensor.p_deferrable0', 'deferrables_schedule') | map(attribute='p_deferrable0') | list }}
          p_pv_forecast: >
            {{ state_attr('sensor.p_pv_forecast', 'forecasts') | map(attribute='p_pv_forecast') | list }}
          p_load_forecast: >
            {{ state_attr('sensor.p_load_forecast', 'forecasts') | map(attribute='p_load_forecast') | list }}
          p_grid_forecast: >
            {{ state_attr('sensor.p_grid_forecast', 'forecasts') | map(attribute='p_grid_forecast') | list }}
          unit_prod_price: >
            {{ state_attr('sensor.unit_prod_price', 'unit_prod_price_forecasts') | map(attribute='unit_prod_price') | list }}
          unit_load_cost: >
            {{ state_attr('sensor.unit_load_cost', 'unit_load_cost_forecasts') | map(attribute='unit_load_cost') | list }}
#
  - binary_sensor:
      ### Kör kompressor
      - name: heatpump_emhass
        unique_id: heatpump_emhass
        availability: >
          {{ is_number(states('sensor.p_deferrable0')) }}
        state: >
          {{ states('sensor.p_deferrable0') | float('not_a_number') > 0}}
#
#
automation:
#
#
  - alias: EMHASS publicera data
    id: EMHASS publicera data
    trigger:
      - platform: homeassistant
        event: start
      - minutes: /1
        platform: time_pattern
    action:
      - service: shell_command.publish_data
#
  #
  - alias: EMHASS forecast
    id: EMHASS forecast
    trigger:
      - platform: time
        at: "23:01"
    action:
      - service: shell_command.trigger_nordpool_solcast_2_forecast
#        data:
#          solcast_api_key: !secret solcast_api_key
#          solcast_rooftop_id: !secret solcast_rooftop_id
#
  - alias: solcast_update
    id: solcast_update
    trigger:
      - platform: time
        at: "22:30"
    action:
      - service: solcast_solar.update_forecasts
#