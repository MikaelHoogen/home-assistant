shell_command:
  trigger_nordpool_forecast: "curl -i -H \"Content-Type: application/json\" -X POST -d '{\"load_cost_forecast\":{{ state_attr('sensor.elpris_sb', 'köp') | list }},\"prod_price_forecast\":{{ state_attr('sensor.elpris_sb', 'sälj') | list }}}' http://localhost:5000/action/dayahead-optim"
  #
  trigger_nordpool_solar_forecast: "curl -i -H \"Content-Type: application/json\" -X POST -d '{\"load_cost_forecast\":{{ state_attr('sensor.elpris_sb', 'köp') | list }},\"prod_price_forecast\":{{ state_attr('sensor.elpris_sb', 'sälj') | list }},\"solar_forecast_kwp\":12.8}' http://localhost:5000/action/dayahead-optim"
  #
  trigger_solcast_forecast: "curl -i -H \"Content-Type: application/json\" -X POST -d '{\"solcast_rooftop_id\":\"{{solcast_rooftop_id}}\",\"solcast_api_key\":\"{{solcast_api_key}}\"}' http://localhost:5000/action/dayahead-optim"
  #
  #trigger_nordpool_solcast_forecast: "curl -i -H \"Content-Type: application/json\" -X POST -d '{\"load_cost_forecast\":{{ state_attr('sensor.elpris_sb', 'köp') | list }},\"prod_price_forecast\":{{ state_attr('sensor.elpris_sb', 'sälj') | list }},\"solcast_rooftop_id\":\"{{solcast_rooftop_id}}\",\"solcast_api_key\":\"{{solcast_api_key}}\"}' http://localhost:5000/action/dayahead-optim"
  #
  trigger_nordpool_solcast_2_forecast: "curl -i -H \"Content-Type: application/json\" -X POST -d '{\"load_cost_forecast\":{{ state_attr('sensor.elpris_sb', 'köp') | list }},
    \"prod_price_forecast\":{{ state_attr('sensor.elpris_sb', 'sälj') | list }},
    \"pv_power_forecast\":{{ state_attr('sensor.solcast_pv_forecast', 'pv_estimate') | list }}}' http://localhost:5000/action/dayahead-optim"
  #
  # Day ahead
  trigger_nordpool_solcast_forecast: >
    curl -i -H "Content-Type: application/json" -X POST -d '{"load_cost_forecast":{{ state_attr('sensor.elpris_sb', 'köp') | list }},
    "prod_price_forecast":{{ state_attr('sensor.elpris_sb', 'sälj') | list }},
    "pv_power_forecast":{{ state_attr('sensor.solcast_pv_forecast', 'pv_estimate') | list }},
    "def_total_hours":[{{ states('sensor.emhass_def_total_hours_vp') }},
                      {{ states('sensor.emhass_def_total_hours_sbv') }}],
    "soc_init": {{ max(0.3,states('sensor.solar_battery_soc') | float(0) / 100 ) }},
    "def_end_timestep":{{ states('sensor.emhass_def_end_timestep') }}
    }' http://localhost:5000/action/dayahead-optim
  #
  #MPC
  trigger_nordpool_solcast_mpc_old: >
    curl -i -H "Content-Type: application/json" -X POST -d '{"load_cost_forecast":{{ state_attr('sensor.elpris_sb', 'köp') | list }},
    "prod_price_forecast":{{ state_attr('sensor.elpris_sb', 'sälj') | list }},
    "pv_power_forecast":{{ state_attr('sensor.solcast_pv_forecast', 'pv_estimate') | list }},
    "prediction_horizon":{{ state_attr('sensor.p_deferrable0', 'deferrables_schedule') | map(attribute='p_deferrable0') | list | length }},
    "def_total_hours":[{{ state_attr('sensor.p_deferrable0','deferrables_schedule') | map(attribute='p_deferrable0') | select('search', '[1-9]') | list | count / 2 }},
                      {{ state_attr('sensor.p_deferrable1','deferrables_schedule') | map(attribute='p_deferrable1') | select('search', '[1-9]') | list | count / 2 }}],
    "soc_init": {{ states('sensor.solar_battery_soc') | float(0) / 100 }}}' http://localhost:5000/action/naive-mpc-optim
  #
  trigger_nordpool_solcast_mpc: >
    curl -i -H "Content-Type: application/json" -X POST -d '{"load_cost_forecast":{{ state_attr('sensor.elpris_sb', 'köp_ny') | list }},
      "prod_price_forecast":{{ state_attr('sensor.elpris_sb', 'sälj_ny') | list }},
      "pv_power_forecast":{{ [states('sensor.solar_power_photovoltaics')] + state_attr('sensor.solcast_pv_forecast', 'pv_estimate_new')[1:] }},
      "prediction_horizon":{{ min(48, state_attr('sensor.elpris_sb', 'sälj_ny') | list | length ) }},
      "def_total_hours":[{{ states('sensor.emhass_def_total_hours_vp') }},
                        {{ states('sensor.emhass_def_total_hours_sbv') }}],
      "soc_init": {{ max(0.3,states('sensor.solar_battery_soc') | float(0) / 100 ) }},
      "def_end_timestep":{{ states('sensor.emhass_def_end_timestep') }}
      }' http://localhost:5000/action/naive-mpc-optim
  #
  publish_data: "curl -i -H \"Content-Type:application/json\" -X POST -d '{\"custom_deferrable_forecast_id\": [{\"entity_id\": \"sensor.p_deferrable0\",\"unit_of_measurement\": \"W\", \"friendly_name\": \"Värmepump\"},{\"entity_id\": \"sensor.p_deferrable1\",\"unit_of_measurement\": \"W\", \"friendly_name\": \"Deferrable Load 1\"}],
    \"custom_unit_load_cost_id\": {\"entity_id\": \"sensor.unit_load_cost\",\"unit_of_measurement\": \"SEK/kWh\", \"friendly_name\": \"Unit load cost\"},
    \"custom_unit_prod_price_id\": {\"entity_id\": \"sensor.unit_prod_price\",\"unit_of_measurement\": \"SEK/kWh\", \"friendly_name\": \"Unit prod price\"}}' http://localhost:5000/action/publish-data"
#
  emhass_machine_learn: "curl -i -H \"Content-Type:application/json\" -X POST -d '{\"model_type\": \"load_forecast\",\"days_to_retrieve\": 13, \"var_model\": \"sensor.power_sannesholma_2181_no_var_loads_filtered\"}' http://localhost:5000/action/forecast-model-fit"
#
  emhass_machine_learn_test: "curl -i -H \"Content-Type:application/json\" -X POST -d '{\"model_type\": \"load_forecast\", \"days_to_retrieve\": 15, \"var_model\": \"sensor.power_sannesholma_2181_no_var_loads_filtered\", \"model_predict_publish\": \"True\"}' http://localhost:5000/action/forecast-model-predict"

  emhass_machine_learn_predict: "curl -i -H \"Content-Type:application/json\" -X POST -d '{\"model_type\": \"load_forecast\", \"days_to_retrieve\": 13, \"var_model\": \"sensor.power_sannesholma_2181_no_var_loads_filtered\", \"model_predict_publish\": \"True\"}' http://localhost:5000/action/forecast-model-predict"
#
# {{ state_attr('weather.smhi_sannesholma','forecast')[1].templow }}
#
sensor:
#
  - platform: statistics
    name: solar_power_photovoltaics_filtered
    unique_id: solar_power_photovoltaics_filtered
    entity_id: sensor.solar_power_photovoltaics
    state_characteristic: average_linear
    max_age:
      minutes: 5
#
  - platform: statistics
    name: power_production_sannesholma_2181_filtered
    unique_id: power_production_sannesholma_2181_filtered
    entity_id: sensor.power_production_sannesholma_2181
    state_characteristic: average_linear
    max_age:
      minutes: 5
#
template:
  - sensor:
      #
      #
      - name: emhass_operating_hours_sbv
        unique_id: emhass_operating_hours_sbv
        state: >
          {% set temp = state_attr('weather.sannesholma_hourly', 'forecast')[:8] | map(attribute='temperature') | average | round(1) %}
          {% if temp < -20 %}
            6
          {% elif -20 <= temp < -15 %}
            5
          {% elif -15 <= temp < -10 %}
            4
          {% elif -10 <= temp < -5 %}
            4
          {% elif -5 <= temp < 0 %}
            2
          {% elif 0 <= temp < 5 %}
            0.5
          {% elif 5 <= temp < 10 %}
            0
          {% else %}
            0
          {% endif %}
#
      - name: emhass_operating_hours_vp_12
        unique_id: emhass_operating_hours_vp_12
        state: >
          {% set temp = state_attr('weather.sannesholma_hourly', 'forecast')[:12] | map(attribute='temperature') | average | round(1) %}
          {% if temp < -20 %}
            12
          {% elif -20 <= temp < -15 %}
            12
          {% elif -15 <= temp < -10 %}
            12
          {% elif -10 <= temp < -5 %}
            10
          {% elif -5 <= temp < 0 %}
            9
          {% elif 0 <= temp < 5 %}
            8
          {% elif 5 <= temp < 10 %}
            7
          {% else %}
            7
          {% endif %}
#
      - name: emhass_operating_hours_vp_24
        unique_id: emhass_operating_hours_vp_24
        state: >
          {% set temp = state_attr('weather.sannesholma_hourly', 'forecast')[:12] | map(attribute='temperature') | average | round(1) %}
          {% if temp < -20 %}
            4
          {% elif -20 <= temp < -15 %}
            2
          {% elif -15 <= temp < -10 %}
            1
          {% elif -10 <= temp < -5 %}
            0.5
          {% elif -5 <= temp < 0 %}
            0.5
          {% elif 0 <= temp < 5 %}
            0.5
          {% elif 5 <= temp < 10 %}
            0.5
          {% else %}
            0.5
          {% endif %}
#
      #
      #
      - name: emhass_def_total_hours_sbv
        unique_id: emhass_def_total_hours_sbv
        state: >
          {% if ( now().hour == 4 and now().minute < 30 )
            or ( now().hour == 12 and now().minute < 30 )
            or ( now().hour == 20 and now().minute < 30 ) %}
          {{ states('sensor.emhass_operating_hours_sbv') }}
          {% else %}
          {{ state_attr('sensor.p_deferrable1','deferrables_schedule') | map(attribute='p_deferrable1') | select('search', '[1-9]') | list | count / 2 }}
          {% endif %}
#
      - name: emhass_def_total_hours_vp
        unique_id: emhass_def_total_hours_vp
        state: >
          {% if now().hour == 20 and now().minute < 30 %}
          {{ states('sensor.emhass_operating_hours_vp_12') }}
          {% elif now().hour == 8 and now().minute < 30 %}
          {{ states('sensor.emhass_operating_hours_vp_24') }}
          {% else %}
          {{ state_attr('sensor.p_deferrable0','deferrables_schedule') | map(attribute='p_deferrable0') | select('search', '[1-9]') | list | count / 2 }}
          {% endif %}
      #
      - name: emhass_def_end_timestep
        unique_id: emhass_def_end_timestep
        state: >
          {% if now().hour == 0 and now().minute < 30 %}
          {{ [17, 8] | list }}
          {% elif now().hour == 0 and now().minute >= 30 %}
          {{ [16, 7] | list }}
          {% elif now().hour == 1 and now().minute < 30 %}
          {{ [15, 6] | list }}
          {% elif now().hour == 1 and now().minute >= 30 %}
          {{ [14, 5] | list }}
          {% elif now().hour == 2 and now().minute < 30 %}
          {{ [13, 4] | list }}
          {% elif now().hour == 2 and now().minute >= 30 %}
          {{ [12, 3] | list }}
          {% elif now().hour == 3 and now().minute < 30 %}
          {{ [11, 2] | list }}
          {% elif now().hour == 3 and now().minute >= 30 %}
          {{ [10, 1] | list }}
          {% elif now().hour == 4 and now().minute < 30 %}
          {{ [9, 16] | list }}
          {% elif now().hour == 4 and now().minute >= 30 %}
          {{ [8, 15] | list }}
          {% elif now().hour == 5 and now().minute < 30 %}
          {{ [7, 14] | list }}
          {% elif now().hour == 5 and now().minute >= 30 %}
          {{ [6, 13] | list }}
          {% elif now().hour == 6 and now().minute < 30 %}
          {{ [5, 12] | list }}
          {% elif now().hour == 6 and now().minute >= 30 %}
          {{ [4, 11] | list }}
          {% elif now().hour == 7 and now().minute < 30 %}
          {{ [3, 10] | list }}
          {% elif now().hour == 7 and now().minute >= 30 %}
          {{ [2, 9] | list }}
          {% elif now().hour == 8 and now().minute < 30 %}
          {{ [25, 8] | list }}
          {% elif now().hour == 8 and now().minute >= 30 %}
          {{ [24, 7] | list }}
          {% elif now().hour == 9 and now().minute < 30 %}
          {{ [23, 6] | list }}
          {% elif now().hour == 9 and now().minute >= 30 %}
          {{ [22, 5] | list }}
          {% elif now().hour == 10 and now().minute < 30 %}
          {{ [21, 4] | list }}
          {% elif now().hour == 10 and now().minute >= 30 %}
          {{ [20, 3] | list }}
          {% elif now().hour == 11 and now().minute < 30 %}
          {{ [19, 2] | list }}
          {% elif now().hour == 11 and now().minute >= 30 %}
          {{ [18, 1] | list }}
          {% elif now().hour == 12 and now().minute < 30 %}
          {{ [17, 16] | list }}
          {% elif now().hour == 12 and now().minute >= 30 %}
          {{ [16, 15] | list }}
          {% elif now().hour == 13 and now().minute < 30 %}
          {{ [15, 14] | list }}
          {% elif now().hour == 13 and now().minute >= 30 %}
          {{ [14, 13] | list }}
          {% elif now().hour == 14 and now().minute < 30 %}
          {{ [13, 12] | list }}
          {% elif now().hour == 14 and now().minute >= 30 %}
          {{ [12, 11] | list }}
          {% elif now().hour == 15 and now().minute < 30 %}
          {{ [11, 10] | list }}
          {% elif now().hour == 15 and now().minute >= 30 %}
          {{ [10, 9] | list }}
          {% elif now().hour == 16 and now().minute < 30 %}
          {{ [9, 8] | list }}
          {% elif now().hour == 16 and now().minute >= 30 %}
          {{ [8, 7] | list }}
          {% elif now().hour == 17 and now().minute < 30 %}
          {{ [7, 6] | list }}
          {% elif now().hour == 17 and now().minute >= 30 %}
          {{ [6, 5] | list }}
          {% elif now().hour == 18 and now().minute < 30 %}
          {{ [5, 4] | list }}
          {% elif now().hour == 18 and now().minute >= 30 %}
          {{ [4, 3] | list }}
          {% elif now().hour == 19 and now().minute < 30 %}
          {{ [3, 2] | list }}
          {% elif now().hour == 19 and now().minute >= 30 %}
          {{ [2, 1] | list }}
          {% elif now().hour == 20 and now().minute < 30 %}
          {{ [25, 16] | list }}
          {% elif now().hour == 20 and now().minute >= 30 %}
          {{ [24, 15] | list }}
          {% elif now().hour == 21 and now().minute < 30 %}
          {{ [23, 14] | list }}
          {% elif now().hour == 21 and now().minute >= 30 %}
          {{ [22, 13] | list }}
          {% elif now().hour == 22 and now().minute < 30 %}
          {{ [21, 12] | list }}
          {% elif now().hour == 22 and now().minute >= 30 %}
          {{ [20, 11] | list }}
          {% elif now().hour == 23 and now().minute < 30 %}
          {{ [19, 10] | list }}
          {% elif now().hour == 23 and now().minute >= 30 %}
          {{ [18, 9] | list }}
          {% else %}
          {{ [25, 2] | list }}
          {% endif %}
      #
      - name: smhi_sannesholma_forecast_tomorrow_templow
        unique_id: smhi_sannesholma_forecast_tomorrow_templow
        availability: >
          {{ is_number(state_attr('weather.smhi_sannesholma','forecast')[1].templow) }}
        unit_of_measurement: "°C"
        state_class: measurement
        state: >
          {{ state_attr('weather.smhi_sannesholma','forecast')[1].templow }}
      #
      #
      - name: sannesholma_forecast_rolling_8h
        unique_id: sannesholma_forecast_rolling_8h
        availability: >
          {{ is_number(state_attr('weather.sannesholma_hourly', 'forecast')[:8]
          | map(attribute='temperature') | average | round(1) ) }}
        unit_of_measurement: "°C"
        state_class: measurement
        state: >
          {{ state_attr('weather.sannesholma_hourly', 'forecast')[:8]
          | map(attribute='temperature') | average | round(1) }}
      #
      - name: sannesholma_forecast_rolling_12h
        unique_id: sannesholma_forecast_rolling_12h
        availability: >
          {{ is_number(state_attr('weather.sannesholma_hourly', 'forecast')[:12]
          | map(attribute='temperature') | average | round(1) ) }}
        unit_of_measurement: "°C"
        state_class: measurement
        state: >
          {{ state_attr('weather.sannesholma_hourly', 'forecast')[:12]
          | map(attribute='temperature') | average | round(1) }}
      #
      - name: ehl75l9h_power_watt
        unique_id: ehl75l9h_power_watt
        availability: >
          {{ is_number(states('sensor.ehl75l9h_power')) }}
        unit_of_measurement: "W"
        state_class: measurement
        device_class: power
        state: >
          {% if is_state('sensor.ehl75l9h_status', 'charging') %}
            {{ ( states('sensor.ehl75l9h_power') | float('naan') * 1000 ) | round(0) }}
          {% else %}
            0.0
          {% endif %}
#
      - name: power_sannesholma_2181_no_var_loads
        unique_id: power_sannesholma_2181_no_var_loads
        availability: >
          {{ is_number(states('sensor.power_usage'))
          and is_number(states('sensor.heatpump_power'))
          and is_number(states('sensor.ehl75l9h_power'))
          }}
        unit_of_measurement: "W"
        state_class: measurement
        device_class: power
        state: >
          {{ max(0,( states('sensor.power_usage') | float('naan')
            - states('sensor.heatpump_power') | float('naan')
            - states('sensor.ehl75l9h_power_watt') | float('naan')
            - states('sensor.snickarboa_heater_power') | float(0)
            - states('sensor.heatpump_addheat1_power') | float(0)
            ) | round(0) ) }}
#
# Diskmaskin?
#
      - name: power_sannesholma_2181_no_var_loads_filtered
        unique_id: power_sannesholma_2181_no_var_loads_filtered
        availability: >
          {{ is_number(states('sensor.power_usage_filtered'))
          and is_number(states('sensor.heatpump_power'))
          and is_number(states('sensor.ehl75l9h_power'))
          }}
        unit_of_measurement: "W"
        state_class: measurement
        device_class: power
        state: >
          {{ max(0,( states('sensor.power_usage_filtered') | float('naan')
            - states('sensor.heatpump_power') | float('naan')
            - states('sensor.ehl75l9h_power_watt') | float('naan')
            - states('sensor.snickarboa_heater_power') | float(0)
            - states('sensor.heatpump_addheat1_power') | float(0)
            ) | round(0) ) }}
#
#
      - name: elpris_sb
        unique_id: elpris_sb
        state: >
          {{ states('sensor.elpris') }}
        availability: >
          {{ is_number(states('sensor.elpris_24h_30m')) }}
        attributes:
          sälj: >
            {% set ns = namespace(x=[]) %}
            {% for i in ((state_attr('sensor.elpris', 'raw_today') | map(attribute='value') | list + state_attr('sensor.elpris', 'raw_tomorrow') | map(attribute='value') | list))[now().hour:][:24] %}
              {% set ns.x = ns.x + [(i + 0.6 + states('sensor.elpris_natnytta') | float(0)) | round(3)] %}
              {% set ns.x = ns.x + [(i + 0.6 + states('sensor.elpris_natnytta') | float(0)) | round(3)] %}
            {% endfor %}
            {{ ns.x }}
          #
          köp: >
            {% set ns = namespace(x=[]) %}
            {% for i in ((state_attr('sensor.electricity_price_sannesholma_2181_prices', 'today') | map(attribute='total') | list + state_attr('sensor.electricity_price_sannesholma_2181_prices', 'tomorrow') | map(attribute='total') | list))[now().hour:][:24] %}
              {% set ns.x = ns.x + [(i + states('sensor.avgift_elnat') | float('naan') / 100
              + states('sensor.avgift_energiskatt') | float('naan') / 100 ) | round(3)] %}
              {% set ns.x = ns.x + [(i + states('sensor.avgift_elnat') | float('naan') / 100
              + states('sensor.avgift_energiskatt') | float('naan') / 100 ) | round(3)] %}
            {% endfor %}
            {{ ns.x }}
          #
          #
          sälj_ny: >
            {% set ns = namespace(x=[]) %}
            {% for i in (state_attr('sensor.elpris_24h_30m', 'sälj_24h') | list)[((now().hour*60 + now().minute) / 30) | int:][:48] %}
              {% set ns.x = ns.x + [(i + 0.6 + states('sensor.elpris_natnytta') | float(0)) | round(3)] %}
            {% endfor %}
            {{ ns.x }}
          #
          köp_ny: >
            {% set ns = namespace(x=[]) %}
            {% for i in (state_attr('sensor.elpris_24h_30m', 'köp_24h') | list)[((now().hour*60 + now().minute) / 30) | int:][:48] %}
              {% set ns.x = ns.x + [(i + states('sensor.avgift_elnat') | float('naan') / 100
              + states('sensor.avgift_energiskatt') | float('naan') / 100 ) | round(3)] %}
            {% endfor %}
            {{ ns.x }}
#
      - name: elpris_24h_30m
        unique_id: elpris_24h_30m
        state: >
          {{ states('sensor.elpris') }}
        #
        attributes:
          sälj_24h: >
            {% set ns = namespace(x=[]) %}
            {% for i in ((state_attr('sensor.elpris', 'raw_today') | map(attribute='value') | list + state_attr('sensor.elpris', 'raw_tomorrow') | map(attribute='value') | list)) %}
              {% set ns.x = ns.x + [i] %}
              {% set ns.x = ns.x + [i] %}
            {% endfor %}
            {{ ns.x }}
          köp_24h: >
            {% set ns = namespace(x=[]) %}
            {% for i in ((state_attr('sensor.electricity_price_sannesholma_2181_prices', 'today') | map(attribute='total') | list + state_attr('sensor.electricity_price_sannesholma_2181_prices', 'tomorrow') | map(attribute='total') | list)) %}
              {% set ns.x = ns.x + [i] %}
              {% set ns.x = ns.x + [i] %}
            {% endfor %}
            {{ ns.x }}
#
## Solcast forecast
      - name: solcast_pv_forecast
        unique_id: solcast_pv_forecast
        state_class: measurement
        state: >
          {{ states('sensor.solcast_pv_forecast_forecast_today') }}
        attributes:
          pv_estimate: >
            {% set ns = namespace(x=[]) %}
            {% for i in ((state_attr('sensor.solcast_pv_forecast_forecast_today', 'detailedForecast') | map(attribute='pv_estimate') | list + state_attr('sensor.solcast_pv_forecast_forecast_tomorrow', 'detailedForecast') | map(attribute='pv_estimate') | list))[now().hour*2:][:48] %}
              {% set ns.x = ns.x + [i | round(3) * 1000 ] %}
            {% endfor %}
            {{ ns.x }}
          pv_estimate_new: >
            {% set ns = namespace(x=[]) %}
            {% for i in ((state_attr('sensor.solcast_pv_forecast_forecast_today', 'detailedForecast') | map(attribute='pv_estimate') | list + state_attr('sensor.solcast_pv_forecast_forecast_tomorrow', 'detailedForecast') | map(attribute='pv_estimate') | list))[((now().hour*60 + now().minute) / 30) | int:][:48] %}
              {% set ns.x = ns.x + [i | round(3) * 1000 ] %}
            {% endfor %}
            {{ ns.x }}
#
# To get long term statistics ##
      - name: p_pv_forecast_measure
        unique_id: p_pv_forecast_measure
        availability: >
          {{ is_number(states('sensor.p_pv_forecast')) }}
        unit_of_measurement: "W"
        state_class: measurement
        state: >
          {{ states('sensor.p_pv_forecast') }}
#
#### Forecast table #####
      - name: p_forecast
        unique_id: p_forecast
        availability: >
          {{ is_number(states('sensor.p_pv_forecast')) }}
        state: >
          {{ states('sensor.p_pv_forecast') }}
        attributes:
          date: >
            {{ state_attr('sensor.p_deferrable0', 'deferrables_schedule') | map(attribute='date') | list }}
          p_deferrable0: >
            {{ state_attr('sensor.p_deferrable0', 'deferrables_schedule') | map(attribute='p_deferrable0') | list }}
          p_deferrable1: >
            {{ state_attr('sensor.p_deferrable1', 'deferrables_schedule') | map(attribute='p_deferrable1') | list }}
          p_pv_forecast: >
            {{ state_attr('sensor.p_pv_forecast', 'forecasts') | map(attribute='p_pv_forecast') | list }}
          p_load_forecast: >
            {{ state_attr('sensor.p_load_forecast', 'forecasts') | map(attribute='p_load_forecast') | list }}
          p_grid_forecast: >
            {{ state_attr('sensor.p_grid_forecast', 'forecasts') | map(attribute='p_grid_forecast') | list }}
          unit_prod_price: >
            {{ state_attr('sensor.unit_prod_price', 'unit_prod_price_forecasts') | map(attribute='unit_prod_price') | list }}
          unit_load_cost: >
            {{ state_attr('sensor.unit_load_cost', 'unit_load_cost_forecasts') | map(attribute='unit_load_cost') | list }}
          p_batt_forecast: >
            {{ state_attr('sensor.p_batt_forecast', 'battery_scheduled_power') | map(attribute='p_batt_forecast') | list }}
          soc_batt_forecast: >
            {{ state_attr('sensor.soc_batt_forecast', 'battery_scheduled_soc') | map(attribute='soc_batt_forecast') | list }}
          solcast_pv_forecast_forecast_today: >
            {% set length = state_attr('sensor.p_deferrable0', 'deferrables_schedule') | map(attribute='date') | list | length %}
            {{ (state_attr('sensor.solcast_pv_forecast_forecast_today', 'detailedForecast') | map(attribute='pv_estimate') | list)[now().hour:][:length]}}
#
  - binary_sensor:
      ### Kör kompressor
      - name: heatpump_emhass
        unique_id: heatpump_emhass
        availability: >
          {{ is_number(states('sensor.p_deferrable0')) }}
        state: >
          {{ states('sensor.p_deferrable0') | float('not_a_number') > 0}}
#
#
automation:
#
#
  - alias: EMHASS publicera data
    id: EMHASS publicera data
    trigger:
      - platform: homeassistant
        event: start
      - minutes: /1
        platform: time_pattern
    action:
      - service: shell_command.publish_data
#
  #
  - alias: EMHASS forecast
    id: EMHASS forecast
    trigger:
      - platform: time
        at: "20:02"
    action:
      - service: shell_command.trigger_nordpool_solcast_forecast
#
  - alias: EMHASS_forecast_mpc
    id: EMHASS_forecast_mpc
    trigger:
      - platform: time_pattern
        #
        minutes: /1
        #minutes: 55
    action:
      - delay:
          #minutes: 1
          seconds: 30
      - service: shell_command.trigger_nordpool_solcast_mpc
#
  - alias: solcast_update
    id: solcast_update
    trigger:
      - platform: time_pattern
        hours: "/3"
    action:
      - service: solcast_solar.update_forecasts
#
#{{ state_attr('sensor.p_deferrable0','deferrables_schedule') | map(attribute='p_deferrable0') | select('search', '2500.0') | list | count }}