shell_command:
  #
  trigger_solcast_forecast: "curl -i -H \"Content-Type: application/json\" -X POST -d '{\"solcast_rooftop_id\":\"{{solcast_rooftop_id}}\",\"solcast_api_key\":\"{{solcast_api_key}}\"}' http://localhost:5000/action/dayahead-optim"
  #
  #
  # Day ahead
  trigger_nordpool_solcast_forecast: >
    curl -i -H "Content-Type: application/json" -X POST -d '{"load_cost_forecast":{{ state_attr('sensor.elpris_sb', 'köp') | list }},
    "prod_price_forecast":{{ state_attr('sensor.elpris_sb', 'sälj') | list }},
    "pv_power_forecast":{{ state_attr('sensor.solcast_pv_forecast', 'pv_estimate') | list }},
    "def_total_hours":[{{ states('sensor.emhass_def_total_hours_vp') }},
                      {{ states('sensor.emhass_def_total_hours_sbv') }}],
    "soc_init": {{ min(0.95,(max(0.2,states('sensor.solar_battery_soc') | float(0) / 100 ))) }},
    "def_end_timestep":{{ states('sensor.emhass_def_end_timestep') }}
    }' http://localhost:5000/action/dayahead-optim
  #
  #
  #
  #
  #
  trigger_nordpool_solcast_mpc_def2: >
    curl -i -H "Content-Type: application/json" -X POST -d '{
      "load_cost_forecast":{{ state_attr('sensor.elpris_sb', 'köp_ny') | list }},
      "prod_price_forecast":{{ state_attr('sensor.elpris_sb', 'sälj_ny') | list }},
      "pv_power_forecast":{{ state_attr('sensor.solcast_pv_forecast', 'pv_estimate_new') }},
      "prediction_horizon":{{ min(48, [state_attr('sensor.elpris_sb', 'sälj_ny') | list | length, state_attr('sensor.elpris_sb', 'köp_ny') | list | length] | min ) }},
      "alpha": {{ ( 1.0 - states('input_number.emhass_beta') | float(0) ) | round(1) }},
      "beta": {{ states('input_number.emhass_beta') }},
      "num_def_loads": 3,
      "P_deferrable_nom":[
            2000,
            1400,
            2000
          ],
      "treat_def_as_semi_cont": [true, true, true],
      "def_total_hours":[
                        {{ states('sensor.emhass_def_total_hours_vp') }},
                        {{ states('sensor.emhass_def_total_hours_sbv') }},
                        {{ states('sensor.emhass_def_total_hours_vp_24')}}],
      "soc_init": {{ min(1.0,(max(0.2,states('sensor.solar_battery_soc') | float(0) / 100 ))) }},
      "set_def_constant": [{{ 'false' if states('sensor.emhass_def_0_end_timestep') | int(0) <= ((states('sensor.emhass_def_total_hours_vp') | float(0)) * 2) | int(0) else 'true' }},
                          false,false],
      "def_start_timestep":[
                            {{states('sensor.emhass_def_0_start_timestep')}},
                            0,
                            {{states('sensor.emhass_def_2_start_timestep')}}],
      "def_end_timestep":[{{ max(((states('sensor.emhass_def_total_hours_vp') | float(0)) * 2) | int(0), states('sensor.emhass_def_0_end_timestep') | int(0)) }},
                          {{states('sensor.emhass_def_1_end_timestep') }},
                          {{states('sensor.emhass_def_2_end_timestep')}}]
      }' http://localhost:5000/action/naive-mpc-optim
  #      "set_def_constant": [{{ 'false' if states('sensor.emhass_def_0_end_timestep') | int(0) <= ((states('sensor.emhass_def_total_hours_vp') | float(0)) * 2) | int(0) else states('input_select.emhass_def_0_set_def_constant') }},
  #                        false,false],
  #
  trigger_nordpool_solcast_mpc_def_current_state: >
    curl -i -H "Content-Type: application/json" -X POST -d '{
      "load_cost_forecast":{{ state_attr('sensor.elpris_sb', 'köp') | list }},
      "prod_price_forecast":{{ state_attr('sensor.elpris_sb', 'sälj') | list }},
      "pv_power_forecast":{{ state_attr('sensor.solcast_pv_forecast', 'pv_estimate') }},
      "prediction_horizon":{{ [state_attr('sensor.elpris_sb', 'sälj') | list | length, state_attr('sensor.elpris_sb', 'köp') | list | length] | min }},
      "alpha": {{ ( 1.0 - states('input_number.emhass_beta') | float(0) ) | round(1) }},
      "beta": {{ states('input_number.emhass_beta') }},
      "num_def_loads": 3,
      "num_lags":96,
      "P_deferrable_nom":[
            {{ states('input_number.emhass_p_deferrable0_nom') | float(2000) }},
            900,
            2000
          ],
      "treat_def_as_semi_cont": [true, true, true],
      "def_current_state": [
                        {{'true' if states('sensor.p_deferrable0') | int > 0 else 'false' }},
                        false,
                        false],
      "def_total_hours":[
                        {{ states('sensor.emhass_def_total_hours_vp') }},
                        {{ states('sensor.emhass_def_total_hours_sbv') }},
                        {{ states('sensor.emhass_def_total_hours_vp_24')}}],
      "soc_init": {{ min(1.0,(max(0.15,states('sensor.solar_battery_soc') | float(0) / 100 ))) }},
      "set_def_constant": [{{ 'true' if states('sensor.emhass_def_0_end_timestep') | int(0) <= ((states('sensor.emhass_def_total_hours_vp') | float(0)) * 2) | int(0) else states('input_select.emhass_def_0_set_def_constant') }},
                          false,false],
      "def_start_timestep":[
                            {{states('sensor.emhass_def_0_start_timestep')}},
                            0,
                            {{states('sensor.emhass_def_2_start_timestep')}}],
      "def_end_timestep":[{{ max(((states('sensor.emhass_def_total_hours_vp') | float(0)) * 2) | int(0), states('sensor.emhass_def_0_end_timestep') | int(0)) }},
                          {{states('sensor.emhass_def_1_end_timestep') }},
                          {{states('sensor.emhass_def_2_end_timestep')}}]
      }' http://localhost:5000/action/naive-mpc-optim
  #
  trigger_nordpool_solcast_mpc: >
    curl -i -H "Content-Type: application/json" -X POST -d '{
      "load_cost_forecast":{{ state_attr('sensor.elpris_sb', 'köp') | list }},
      "prod_price_forecast":{{ state_attr('sensor.elpris_sb', 'sälj') | list }},
      "pv_power_forecast":{{ state_attr('sensor.solcast_pv_forecast', 'pv_estimate') }},
      "prediction_horizon":{{ [state_attr('sensor.elpris_sb', 'sälj') | list | length, state_attr('sensor.elpris_sb', 'köp') | list | length] | min }},
      "alpha": {{ ( 1.0 - states('input_number.emhass_beta') | float(0) ) | round(1) }},
      "beta": {{ states('input_number.emhass_beta') }},
      "num_def_loads": 3,
      "num_lags":96,
      "P_deferrable_nom":[
            {{ states('input_number.emhass_p_deferrable0_nom') | float(2000) }},
            900,
            2000
          ],
      "treat_def_as_semi_cont": [true, true, true],
      "def_total_hours":[
                        {{ states('sensor.emhass_def_total_hours_vp') }},
                        {{ states('sensor.emhass_def_total_hours_sbv') }},
                        {{ states('sensor.emhass_def_total_hours_vp_24')}}],
      "soc_init": {{ min(1.0,(max(0.15,states('sensor.solar_battery_soc') | float(0) / 100 ))) }},
      "set_def_constant": [{{ 'true' if states('sensor.emhass_def_0_end_timestep') | int(0) <= ((states('sensor.emhass_def_total_hours_vp') | float(0)) * 2) | int(0) else states('input_select.emhass_def_0_set_def_constant') }},
                          false,false],
      "def_start_timestep":[
                            {{states('sensor.emhass_def_0_start_timestep')}},
                            0,
                            {{states('sensor.emhass_def_2_start_timestep')}}],
      "def_end_timestep":[{{ max(((states('sensor.emhass_def_total_hours_vp') | float(0)) * 2) | int(0), states('sensor.emhass_def_0_end_timestep') | int(0)) }},
                          {{states('sensor.emhass_def_1_end_timestep') }},
                          {{states('sensor.emhass_def_2_end_timestep')}}]
      }' http://localhost:5000/action/naive-mpc-optim
  #
  trigger_nordpool_solcast_mpc_bil: >
    curl -i -H "Content-Type: application/json" -X POST -d '{
      "load_cost_forecast":{{ state_attr('sensor.elpris_sb', 'köp') | list }},
      "prod_price_forecast":{{ state_attr('sensor.elpris_sb', 'sälj') | list }},
      "pv_power_forecast":{{ state_attr('sensor.solcast_pv_forecast', 'pv_estimate') }},
      "prediction_horizon":{{ [state_attr('sensor.elpris_sb', 'sälj') | list | length, state_attr('sensor.elpris_sb', 'köp') | list | length] | min }},
      "alpha": {{ ( 1.0 - states('input_number.emhass_beta') | float(0) ) | round(1) }},
      "beta": {{ states('input_number.emhass_beta') }},
      "num_def_loads": 3,
      "num_lags":96,
      "P_deferrable_nom":[
            {{ states('input_number.emhass_p_deferrable0_nom') | float(2000) }},
            900,
            {{ states('input_number.emhass_p_deferrable3_nom') | float(2000) }}
          ],
      "treat_def_as_semi_cont": [true, true, true],
      "def_total_hours":[
                        {{ states('sensor.emhass_def_total_hours_vp') }},
                        {{ states('sensor.emhass_def_total_hours_sbv') }},
                        {{ min(states('sensor.emhass_def_3_end_timestep') | float() / 2, states('input_number.emhass_def_total_hours_bil') | float()) }}],
      "soc_init": {{ min(1.0,(max(0.15,states('sensor.solar_battery_soc') | float(0) / 100 ))) }},
      "set_def_constant": [{{ 'true' if states('sensor.emhass_def_0_end_timestep') | int(0) <= ((states('sensor.emhass_def_total_hours_vp') | float(0)) * 2) | int(0) else states('input_select.emhass_def_0_set_def_constant') }},
                          false,
                          true],
      "def_start_timestep":[
                            {{states('sensor.emhass_def_0_start_timestep')}},
                            0,
                            {{states('sensor.emhass_def_3_start_timestep')}}],
      "def_end_timestep":[{{ max(((states('sensor.emhass_def_total_hours_vp') | float(0)) * 2) | int(0), states('sensor.emhass_def_0_end_timestep') | int(0)) }},
                          {{states('sensor.emhass_def_1_end_timestep') }},
                          {{states('sensor.emhass_def_3_end_timestep')}}]
      }' http://localhost:5000/action/naive-mpc-optim
  #
  trigger_nordpool_solcast_mpc_thermal: >
    curl -i -H "Content-Type: application/json" -X POST -d '{
      "load_cost_forecast":{{ state_attr('sensor.elpris_sb', 'köp') | list }},
      "prod_price_forecast":{{ state_attr('sensor.elpris_sb', 'sälj') | list }},
      "pv_power_forecast":{{ state_attr('sensor.solcast_pv_forecast', 'pv_estimate') }},
      "prediction_horizon":{{ [state_attr('sensor.elpris_sb', 'sälj') | list | length, state_attr('sensor.elpris_sb', 'köp') | list | length] | min }},
      "alpha": {{ ( 1.0 - states('input_number.emhass_beta') | float(0) ) | round(1) }},
      "beta": {{ states('input_number.emhass_beta') }},
      "num_def_loads": 3,
      "num_lags":96,
      "P_deferrable_nom":[
            {{ states('input_number.emhass_p_deferrable0_nom') | float(2000) }},
            1400,
            2000
          ],
      "treat_def_as_semi_cont": [true, true, true],
      "def_current_state": [
                        {{'true' if states('sensor.p_deferrable0') | int > 0 else 'false' }},
                        false,
                        false],
      "def_total_hours":[
                        {{ states('sensor.emhass_def_total_hours_vp') }},
                        {{ states('sensor.emhass_def_total_hours_sbv') }},
                        {{ states('sensor.emhass_def_total_hours_vp_24')}}],
      "soc_init": {{ min(1.0,(max(0.15,states('sensor.solar_battery_soc') | float(0) / 100 ))) }},
      "set_def_constant": [{{ 'true' if states('sensor.emhass_def_0_end_timestep') | int(0) <= ((states('sensor.emhass_def_total_hours_vp') | float(0)) * 2) | int(0) else states('input_select.emhass_def_0_set_def_constant') }},
                          false,false],
      "def_start_timestep":[
                            {{states('sensor.emhass_def_0_start_timestep')}},
                            0,
                            {{states('sensor.emhass_def_2_start_timestep')}}],
      "def_end_timestep":[{{ max(((states('sensor.emhass_def_total_hours_vp') | float(0)) * 2) | int(0), states('sensor.emhass_def_0_end_timestep') | int(0)) }},
                          {{states('sensor.emhass_def_1_end_timestep') }},
                          {{states('sensor.emhass_def_2_end_timestep')}}],
      "outdoor_temperature_forecast": {{ state_attr('sensor.smhi_sannesholma_hourly', 'forecast')[:48] | map(attribute='temperature') | list}},
      "def_load_config": {
          {},
          {"thermal_config": {
            "heating_rate": 5.0,
            "cooling_constant": 0.1,
            "overshoot_temperature": 24.0,
            "start_temperature": {{ states('sensor.snickarboa_temperature') }},
            "heater_desired_temperatures": [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]}},
          {}
          }
      }' http://localhost:5000/action/naive-mpc-optim
  #
  publish_data: "curl -i -H \"Content-Type:application/json\" -X POST -d '{\"custom_deferrable_forecast_id\": [{\"entity_id\": \"sensor.p_deferrable0\",\"unit_of_measurement\": \"W\", \"friendly_name\": \"Värmepump\"},{\"entity_id\": \"sensor.p_deferrable1\",\"unit_of_measurement\": \"W\", \"friendly_name\": \"Deferrable Load 1\"}],
    \"custom_unit_load_cost_id\": {\"entity_id\": \"sensor.unit_load_cost\",\"unit_of_measurement\": \"SEK/kWh\", \"friendly_name\": \"Unit load cost\"},
    \"custom_unit_prod_price_id\": {\"entity_id\": \"sensor.unit_prod_price\",\"unit_of_measurement\": \"SEK/kWh\", \"friendly_name\": \"Unit prod price\"}}' http://localhost:5000/action/publish-data"
#
  publish_data_def2: >
    curl -i -H "Content-Type:application/json" -X POST -d '{
      "num_def_loads": 3,
      "custom_deferrable_forecast_id": [
        {"entity_id": "sensor.p_deferrable0","unit_of_measurement": "W", "friendly_name": "Värmepump"},
        {"entity_id": "sensor.p_deferrable1","unit_of_measurement": "W", "friendly_name": "Deferrable Load 1"},
        {"entity_id": "sensor.p_deferrable2","unit_of_measurement": "W", "friendly_name": "Deferrable Load 2"}
        ],
      "custom_unit_load_cost_id": {"entity_id": "sensor.unit_load_cost","unit_of_measurement": "SEK/kWh", "friendly_name": "Unit load cost"},
      "custom_unit_prod_price_id": {"entity_id": "sensor.unit_prod_price","unit_of_measurement": "SEK/kWh", "friendly_name": "Unit prod price"}
      }' http://localhost:5000/action/publish-data
#
  emhass_machine_learn: >
    curl -i -H "Content-Type:application/json" -X POST -d '{"model_type": "load_forecast",
      "days_to_retrieve": 59,
      "var_model": "sensor.power_sannesholma_2181_no_var_loads_filtered"}' http://localhost:5000/action/forecast-model-fit
#
  emhass_machine_learn_96h: >
    curl -i -H "Content-Type:application/json" -X POST -d '{"model_type": "load_forecast",
      "days_to_retrieve": 59,
      "var_model": "sensor.power_sannesholma_2181_no_var_loads_filtered",
      "num_lags":96,
      "split_date_delta":"48h",
      "perform_backtest":"False"}' http://localhost:5000/action/forecast-model-fit
#
  emhass_machine_tune_96h: >
    curl -i -H "Content-Type:application/json" -X POST -d '{"model_type": "load_forecast",
      "days_to_retrieve": 59,
      "var_model": "sensor.power_sannesholma_2181_no_var_loads_filtered",
      "num_lags":96}' http://localhost:5000/action/forecast-model-tune
#
  emhass_machine_tune: >
    curl -i -H "Content-Type:application/json" -X POST -d '{"model_type": "load_forecast",
      "days_to_retrieve": 59,
      "var_model": "sensor.power_sannesholma_2181_no_var_loads_filtered"}' http://localhost:5000/action/forecast-model-tune
#
#  emhass_machine_learn_test: "curl -i -H \"Content-Type:application/json\" -X POST -d '{\"model_type\": \"load_forecast\", \"days_to_retrieve\": 15, \"var_model\": \"sensor.power_sannesholma_2181_no_var_loads_filtered\", \"model_predict_publish\": \"True\"}' http://localhost:5000/action/forecast-model-predict"
#
  emhass_machine_learn_predict: >
    curl -i -H "Content-Type:application/json" -X POST -d '{"model_type": "load_forecast",
      "days_to_retrieve": 59,
      "var_model": "sensor.power_sannesholma_2181_no_var_loads_filtered",
      "model_predict_publish": "True"}' http://localhost:5000/action/forecast-model-predict
# {{ state_attr('weather.smhi_sannesholma','forecast')[1].templow }}
#
sensor:
#
  - platform: statistics
    name: solar_power_photovoltaics_filtered
    unique_id: solar_power_photovoltaics_filtered
    entity_id: sensor.solar_power_photovoltaics
    state_characteristic: average_linear
    max_age:
      minutes: 5
#
  - platform: statistics
    name: power_production_sannesholma_2181_filtered
    unique_id: power_production_sannesholma_2181_filtered
    entity_id: sensor.power_production_sannesholma_2181
    state_characteristic: average_linear
    max_age:
      minutes: 5
#
#
template:
#
  # Forecast
  - trigger:
      - platform: time_pattern
        hours: /1
    action:
      - service: weather.get_forecasts
        data:
          type: hourly
        target:
          entity_id: weather.smhi_sannesholma
        response_variable: hourly
    sensor:
      - name: smhi_sannesholma_hourly
        unique_id: smhi_sannesholma_hourly
        state: "{{ now().isoformat() }}"
        attributes:
          forecast: "{{ hourly['weather.smhi_sannesholma'].forecast }}"
  #
  - sensor:
      #
      #
      - name: emhass_operating_hours_sbv
        unique_id: emhass_operating_hours_sbv
        state: >
          {% set temp = state_attr('sensor.smhi_sannesholma_hourly', 'forecast')[:8] | map(attribute='temperature') | average | round(1) %}
          {% if temp < -20 %}
            6
          {% elif -20 <= temp < -15 %}
            5
          {% elif -15 <= temp < -10 %}
            4
          {% elif -10 <= temp < -5 %}
            3
          {% elif -5 <= temp < -3 %}
            2
          {% elif -3 <= temp < 2 %}
            1.5
          {% elif 2 <= temp < 4 %}
            0.5
          {% elif 4 <= temp < 10 %}
            0
          {% else %}
            0
          {% endif %}
#
      - name: emhass_operating_hours_vp_12
        unique_id: emhass_operating_hours_vp_12
        state: >
          {% set temp = state_attr('sensor.smhi_sannesholma_hourly', 'forecast')[:24] | map(attribute='temperature') | average | round(1) %}
          {% if temp < -20 %}
            12
          {% elif -20 <= temp < -15 %}
            12
          {% elif -15 <= temp < -10 %}
            11
          {% elif -10 <= temp < -4 %}
            10
          {% elif -4 <= temp < 0 %}
            9.5
          {% elif 0 <= temp < 2 %}
            8.5
          {% elif 2 <= temp < 5 %}
            7.5
          {% elif 5 <= temp < 10 %}
            7
          {% elif temp >= 10 %}
            6.5
          {% else %}
            8
          {% endif %}
#
      - name: emhass_operating_hours_vp_24
        unique_id: emhass_operating_hours_vp_24
        state: >
          {% set temp = state_attr('sensor.smhi_sannesholma_hourly', 'forecast')[:12] | map(attribute='temperature') | average | round(1) %}
          {% if temp < -20 %}
            4
          {% elif -20 <= temp < -15 %}
            2
          {% elif -15 <= temp < -10 %}
            1
          {% elif -10 <= temp < -5 %}
            0.5
          {% elif -5 <= temp < 0 %}
            0.5
          {% elif 0 <= temp < 5 %}
            0.5
          {% elif 5 <= temp < 10 %}
            0.5
          {% else %}
            0.5
          {% endif %}
#
      #
      #
      - name: emhass_def_total_hours_sbv
        unique_id: emhass_def_total_hours_sbv
        state: >
          {% if ( now().hour == 4 and now().minute < 30 )
            or ( now().hour == 12 and now().minute < 30 )
            or ( now().hour == 20 and now().minute < 30 ) %}
          {{ states('sensor.emhass_operating_hours_sbv') }}
          {% else %}
          {{ state_attr('sensor.p_deferrable1','deferrables_schedule') | map(attribute='p_deferrable1') | select('search', '[1-9]') | list | count / 2 }}
          {% endif %}
#
#
#      - name: emhass_def_total_hours_vp_old
#        unique_id: emhass_def_total_hours_vp_old
#        state: >
#          {% if now().hour == 18 and now().minute < 30 %}
#          {{ states('sensor.emhass_operating_hours_vp_12') }}
#          {% elif now().hour == 6 and now().minute < 30 %}
#          {{ states('sensor.emhass_operating_hours_vp_24') }}
#          {% else %}
#          {{ state_attr('sensor.p_deferrable0','deferrables_schedule') | map(attribute='p_deferrable0') | select('search', '[1-9]') | list | count / 2 }}
#          {% endif %}
      #
      #
      - name: emhass_def_total_hours_vp
        unique_id: emhass_def_total_hours_vp
        state: >
          {% if states('sensor.emhass_def_0_start_timestep') | float(0) > 0
                and min(48, [state_attr('sensor.elpris_sb', 'sälj_ny') | list | length, state_attr('sensor.elpris_sb', 'köp_ny') | list | length] | min ) > states('sensor.emhass_def_0_end_timestep') | int(0) %}
          {{ states('sensor.emhass_operating_hours_vp_12') }}
          {% else %}
          {{ state_attr('sensor.p_deferrable0','deferrables_schedule') | map(attribute='p_deferrable0') | select('search', '[1-9]') | list | count / 2 }}
          {% endif %}
      #
      - name: emhass_def_total_hours_vp_24
        unique_id: emhass_def_total_hours_vp_24
        state: >
          {% if is_state('input_boolean.emhass_p_deferrable2', 'off') %}
          0
          {% elif states('sensor.emhass_def_2_start_timestep') | float(0) > 0
                and min(48, [state_attr('sensor.elpris_sb', 'sälj_ny') | list | length, state_attr('sensor.elpris_sb', 'köp_ny') | list | length] | min ) > states('sensor.emhass_def_2_end_timestep') | int(0) %}
          {{ states('sensor.emhass_operating_hours_vp_24') }}
          {% else %}
          {{ state_attr('sensor.p_deferrable2','deferrables_schedule') | map(attribute='p_deferrable2') | select('search', '[1-9]') | list | count / 2 }}
          {% endif %}
      #
      ## Test
      - name: emhass_def_total_hours_3
        unique_id: emhass_def_total_hours_3
        state: >
          {% if states('sensor.emhass_def_3_start_timestep') | float(0) > 0
                and states('sensor.emhass_def_3_start_timestep') | float(0) < states('sensor.emhass_def_3_end_timestep') | float(0)
                and min(48, [state_attr('sensor.elpris_sb', 'sälj_ny') | list | length, state_attr('sensor.elpris_sb', 'köp_ny') | list | length] | min ) > states('sensor.emhass_def_3_end_timestep') | int(0) %}
          {{ states('sensor.emhass_operating_hours_vp_12') }}
          {% else %}
          {{ state_attr('sensor.p_deferrable0','deferrables_schedule') | map(attribute='p_deferrable0') | select('search', '[1-9]') | list | count / 2 }}
          {% endif %}
      #
      #
      
      - name: emhass_def_1_end_timestep
        unique_id: emhass_def_1_end_timestep
        state: >
          {% if now().hour == 0 and now().minute < 30 %}
          {{ 8 }}
          {% elif now().hour == 0 and now().minute >= 30 %}
          {{ 7 }}
          {% elif now().hour == 1 and now().minute < 30 %}
          {{ 6 }}
          {% elif now().hour == 1 and now().minute >= 30 %}
          {{ 5 }}
          {% elif now().hour == 2 and now().minute < 30 %}
          {{ 4 }}
          {% elif now().hour == 2 and now().minute >= 30 %}
          {{ 3 }}
          {% elif now().hour == 3 and now().minute < 30 %}
          {{ 2 }}
          {% elif now().hour == 3 and now().minute >= 30 %}
          {{ 1 }}
          {% elif now().hour == 4 and now().minute < 30 %}
          {{ 16 }}
          {% elif now().hour == 4 and now().minute >= 30 %}
          {{ 15 }}
          {% elif now().hour == 5 and now().minute < 30 %}
          {{ 14 }}
          {% elif now().hour == 5 and now().minute >= 30 %}
          {{ 13 }}
          {% elif now().hour == 6 and now().minute < 30 %}
          {{ 12 }}
          {% elif now().hour == 6 and now().minute >= 30 %}
          {{ 11 }}
          {% elif now().hour == 7 and now().minute < 30 %}
          {{ 10 }}
          {% elif now().hour == 7 and now().minute >= 30 %}
          {{ 9 }}
          {% elif now().hour == 8 and now().minute < 30 %}
          {{ 8 }}
          {% elif now().hour == 8 and now().minute >= 30 %}
          {{ 7 }}
          {% elif now().hour == 9 and now().minute < 30 %}
          {{ 6 }}
          {% elif now().hour == 9 and now().minute >= 30 %}
          {{ 5 }}
          {% elif now().hour == 10 and now().minute < 30 %}
          {{ 4 }}
          {% elif now().hour == 10 and now().minute >= 30 %}
          {{ 3 }}
          {% elif now().hour == 11 and now().minute < 30 %}
          {{ 2 }}
          {% elif now().hour == 11 and now().minute >= 30 %}
          {{ 1 }}
          {% elif now().hour == 12 and now().minute < 30 %}
          {{ 16 }}
          {% elif now().hour == 12 and now().minute >= 30 %}
          {{ 15 }}
          {% elif now().hour == 13 and now().minute < 30 %}
          {{ 14 }}
          {% elif now().hour == 13 and now().minute >= 30 %}
          {{ 13 }}
          {% elif now().hour == 14 and now().minute < 30 %}
          {{ 12 }}
          {% elif now().hour == 14 and now().minute >= 30 %}
          {{ 11 }}
          {% elif now().hour == 15 and now().minute < 30 %}
          {{ 10 }}
          {% elif now().hour == 15 and now().minute >= 30 %}
          {{ 9 }}
          {% elif now().hour == 16 and now().minute < 30 %}
          {{ 8 }}
          {% elif now().hour == 16 and now().minute >= 30 %}
          {{ 7 }}
          {% elif now().hour == 17 and now().minute < 30 %}
          {{ 6 }}
          {% elif now().hour == 17 and now().minute >= 30 %}
          {{ 5 }}
          {% elif now().hour == 18 and now().minute < 30 %}
          {{ 4 }}
          {% elif now().hour == 18 and now().minute >= 30 %}
          {{ 3 }}
          {% elif now().hour == 19 and now().minute < 30 %}
          {{ 2 }}
          {% elif now().hour == 19 and now().minute >= 30 %}
          {{ 1 }}
          {% elif now().hour == 20 and now().minute < 30 %}
          {{ 16 }}
          {% elif now().hour == 20 and now().minute >= 30 %}
          {{ 15 }}
          {% elif now().hour == 21 and now().minute < 30 %}
          {{ 14 }}
          {% elif now().hour == 21 and now().minute >= 30 %}
          {{ 13 }}
          {% elif now().hour == 22 and now().minute < 30 %}
          {{ 12 }}
          {% elif now().hour == 22 and now().minute >= 30 %}
          {{ 11 }}
          {% elif now().hour == 23 and now().minute < 30 %}
          {{ 10 }}
          {% elif now().hour == 23 and now().minute >= 30 %}
          {{ 9 }}
          {% else %}
          {{ 2 }}
          {% endif %}
#
#
      - name: emhass_def_0_start_timestep
        unique_id: emhass_def_0_start_timestep
        state: >
          {% set ts = (((today_at(states('input_datetime.emhass_p_deferrable0_start_time')) | as_timestamp - now()| as_timestamp) +900) / 1800) | round(0) | int(0) %}
          {% if states('input_datetime.emhass_p_deferrable0_start_time') > states('input_datetime.emhass_p_deferrable0_end_time') %}
            {% if now() < today_at(states('input_datetime.emhass_p_deferrable0_end_time')) %}
              {% set ts = ts - 48 %}
            {% endif %}
          {% endif %}
          {{ ts * is_state('input_boolean.emhass_p_deferrable0_timestep','on') }}
#
      - name: emhass_def_0_end_timestep
        unique_id: emhass_def_0_end_timestep
        state: >
          {% set ts = (((today_at(states('input_datetime.emhass_p_deferrable0_end_time')) | as_timestamp - now() | as_timestamp) + 900 ) / 1800) | round(0) | int(0) %}
          {% if states('input_datetime.emhass_p_deferrable0_start_time') > states('input_datetime.emhass_p_deferrable0_end_time') %}
            {% if now() > today_at(states('input_datetime.emhass_p_deferrable0_end_time')) %}
              {% set ts = ts + 48 %}
            {% endif %}
          {% endif %}
          {{ ts * is_state('input_boolean.emhass_p_deferrable0_timestep','on') }}
#
      - name: emhass_def_2_start_timestep
        unique_id: emhass_def_2_start_timestep
        state: >
          {% set ts = (((today_at(states('input_datetime.emhass_p_deferrable0_end_time')) | as_timestamp - now()| as_timestamp) +900) / 1800) | round(0) | int(0) %}
          {% if states('input_datetime.emhass_p_deferrable0_end_time') < states('input_datetime.emhass_p_deferrable0_start_time') %}
            {% if now() > today_at(states('input_datetime.emhass_p_deferrable0_start_time')) %}
              {% set ts = ts + 48 %}
            {% endif %}
          {% endif %}
          {{ ts * is_state('input_boolean.emhass_p_deferrable0_timestep','on') }}
#
      - name: emhass_def_2_end_timestep
        unique_id: emhass_def_2_end_timestep
        state: >
          {% set ts = (((today_at(states('input_datetime.emhass_p_deferrable0_start_time')) | as_timestamp - now() | as_timestamp) + 900 ) / 1800) | round(0) | int(0) %}
          {% if now() > today_at(states('input_datetime.emhass_p_deferrable0_start_time')) %}
            {% set ts = ts + 48 %}
          {% endif %}
          {{ ts * is_state('input_boolean.emhass_p_deferrable0_timestep','on') }}
#
      - name: emhass_def_3_start_timestep
        unique_id: emhass_def_3_start_timestep
        state: >
          {% set ts = (((today_at(states('input_datetime.p_deferrable3_start_time'))|as_timestamp - now()|as_timestamp)+900)/1800) | round(0) | int(0) %}
          {% if states('input_datetime.p_deferrable3_start_time') > states('input_datetime.p_deferrable3_end_time') %}
            {% if now() < today_at(states('input_datetime.p_deferrable3_end_time')) %}
              {% set ts = ts - 48 %}
            {% endif %}
          {% endif %}
          {{ ts * is_state('input_boolean.p_deferrable_3_timestep','on') }}

      - name: emhass_def_3_end_timestep
        unique_id: emhass_def_3_end_timestep
        state: >
          {% set ts = (((today_at(states('input_datetime.p_deferrable3_end_time'))|as_timestamp - now()|as_timestamp)+900)/1800) | round(0) | int(0) %}
          {% if now() > today_at(states('input_datetime.p_deferrable3_end_time')) %}
            {% set ts = ts + 48 %}
          {% endif %}
          {{ ts * is_state('input_boolean.p_deferrable_3_timestep','on') }}
      #

#      - name: smhi_sannesholma_forecast_tomorrow_templow
#        unique_id: smhi_sannesholma_forecast_tomorrow_templow
#        availability: >
#          {{ is_number(state_attr('weather.smhi_sannesholma','forecast')[1].templow) }}
#        unit_of_measurement: "°C"
#        state_class: measurement
#        state: >
#          {{ state_attr('weather.smhi_sannesholma','forecast')[1].templow }}
      #
      #
      - name: sannesholma_forecast_rolling_8h
        unique_id: sannesholma_forecast_rolling_8h
        availability: >
          {{ is_number(state_attr('sensor.smhi_sannesholma_hourly', 'forecast')[:8]
          | map(attribute='temperature') | average | round(1) ) }}
        unit_of_measurement: "°C"
        state: >
          {{ state_attr('sensor.smhi_sannesholma_hourly', 'forecast')[:8]
          | map(attribute='temperature') | average | round(1) }}
      #
      # Rullande 12h
      - name: sannesholma_forecast_rolling_12h
        unique_id: sannesholma_forecast_rolling_12h
        availability: >
          {{ is_number(state_attr('sensor.smhi_sannesholma_hourly', 'forecast')[:12]
          | map(attribute='temperature') | average | round(1) ) }}
        unit_of_measurement: "°C"
        state: >
          {{ state_attr('sensor.smhi_sannesholma_hourly', 'forecast')[:12]
          | map(attribute='temperature') | average | round(1) }}
      #
      - name: sannesholma_forecast_rolling_24h
        unique_id: sannesholma_forecast_rolling_24h
        availability: >
          {{ is_number(state_attr('sensor.smhi_sannesholma_hourly', 'forecast')[:24]
          | map(attribute='temperature') | average | round(1) ) }}
        unit_of_measurement: "°C"
        state: >
          {{ state_attr('sensor.smhi_sannesholma_hourly', 'forecast')[:24]
          | map(attribute='temperature') | average | round(1) }}
      #
      #
      - name: ehl75l9h_power_watt
        unique_id: ehl75l9h_power_watt
        availability: >
          {{ is_number(states('sensor.ehl75l9h_power')) }}
        unit_of_measurement: "W"
        state_class: measurement
        device_class: power
        state: >
          {{ ( states('sensor.ehl75l9h_power') | float('naan') * 1000 ) | round(0) }}
#
#
      - name: power_sannesholma_2181_no_var_loads
        unique_id: power_sannesholma_2181_no_var_loads
        availability: >
          {{ is_number(states('sensor.power_usage'))
          and is_number(states('sensor.heatpump_power'))
          }}
        unit_of_measurement: "W"
        state_class: measurement
        device_class: power
        state: >
          {{ max(0,( states('sensor.power_usage') | float('naan')
            - states('sensor.heatpump_power') | float('naan')
            - states('sensor.ehl75l9h_power_watt') | float(0)
            - states('sensor.shellyplug_s_c8c9a3a4f80a_power') | float(0)
            - states('sensor.heatpump_addheat1_power') | float(0)
            ) | round(0) ) }}
#
#
      - name: power_sannesholma_2181_no_var_loads_ev
        unique_id: power_sannesholma_2181_no_var_loads_ev
        availability: >
          {{ is_number(states('sensor.power_usage'))
          and is_number(states('sensor.heatpump_power'))
          }}
        unit_of_measurement: "W"
        state_class: measurement
        device_class: power
        state: >
          {{ max(0,( states('sensor.power_usage') | float('naan')
            - states('sensor.heatpump_power') | float('naan')
            - states('sensor.shellyplug_s_c8c9a3a4f80a_power') | float(0)
            ) | round(0) ) }}
#
#
# 
#
      - name: power_sannesholma_2181_no_var_loads_filtered
        unique_id: power_sannesholma_2181_no_var_loads_filtered
        availability: >
          {{ is_number(states('sensor.power_usage_filtered'))
          and is_number(states('sensor.heatpump_power'))
          }}
        unit_of_measurement: "W"
        state_class: measurement
        device_class: power
        state: >
          {{ max(0,( states('sensor.power_usage_filtered') | float('naan')
            - states('sensor.heatpump_power') | float('naan')
            - states('sensor.ehl75l9h_power_watt') | float(0)
            - states('sensor.shellyplug_s_c8c9a3a4f80a_power') | float(0)
            - states('sensor.heatpump_addheat1_power') | float(0)
            ) | round(0) ) }}
#
#
      - name: elpris_sb
        unique_id: elpris_sb
        state: >
          {{ states('sensor.elpris') }}
        availability: >
          {{ is_number(states('sensor.elpris_24h_30m')) }}
        attributes:
#          sälj: >
#            {% set ns = namespace(x=[]) %}
#            {% for i in ((state_attr('sensor.elpris', 'raw_today') | map(attribute='value') | list + state_attr('sensor.elpris', 'raw_tomorrow') | map(attribute='value') | list))[now().hour:][:24] %}
#              {% set ns.x = ns.x + [(i + 0.6 + states('sensor.elpris_natnytta') | float(0)) | round(3)] %}
#              {% set ns.x = ns.x + [(i + 0.6 + states('sensor.elpris_natnytta') | float(0)) | round(3)] %}
#            {% endfor %}
#            {{ ns.x }}
          #
#          köp: >
#            {% set ns = namespace(x=[]) %}
#            {% for i in ((state_attr('sensor.electricity_price_sannesholma_2181_prices', 'today') | map(attribute='total') | list + state_attr('sensor.electricity_price_sannesholma_2181_prices', 'tomorrow') | map(attribute='total') | list))[now().hour:][:24] %}
#              {% set ns.x = ns.x + [(i + states('sensor.avgift_elnat') | float('naan') / 100
#              + states('sensor.avgift_energiskatt') | float('naan') / 100 ) | round(3)] %}
#              {% set ns.x = ns.x + [(i + states('sensor.avgift_elnat') | float('naan') / 100
#              + states('sensor.avgift_energiskatt') | float('naan') / 100 ) | round(3)] %}
#            {% endfor %}
#            {{ ns.x }}
          #
          #
          sälj_ny: >
            {% set ns = namespace(x=[]) %}
            {% for i in (state_attr('sensor.elpris_24h_30m', 'sälj_24h') | list)[((now().hour*60 + now().minute) / 30) | int:][:48] %}
              {% set ns.x = ns.x + [(i + 0.6 + states('sensor.elpris_natnytta') | float(0)) | round(3)] %}
            {% endfor %}
            {{ ns.x }}
          #
          köp_ny: >
            {% set ns = namespace(x=[]) %}
            {% for i in (state_attr('sensor.elpris_24h_30m', 'köp_24h') | list)[((now().hour*60 + now().minute) / 30) | int:][:48] %}
              {% set ns.x = ns.x + [(i + states('sensor.avgift_elnat') | float('naan') / 100
              + states('sensor.avgift_energiskatt') | float('naan') / 100 ) | round(3)] %}
            {% endfor %}
            {{ ns.x }}
#
          sälj: >
            {% set ns = namespace(x=[]) %}
            {% for i in (state_attr('sensor.elpris_24h_30m', 'sälj_24h') | list)[((now().hour*60 + now().minute) / 30) | int:] %}
              {% set ns.x = ns.x + [(i + 0.6 + states('sensor.elpris_natnytta') | float(0)) | round(3)] %}
            {% endfor %}
            {{ ns.x }}
#
          köp: >
            {% set ns = namespace(x=[]) %}
            {% for i in (state_attr('sensor.elpris_24h_30m', 'köp_24h') | list)[((now().hour*60 + now().minute) / 30) | int:] %}
              {% set ns.x = ns.x + [(i + states('sensor.avgift_elnat') | float('naan') / 100
              + states('sensor.avgift_energiskatt') | float('naan') / 100 ) | round(3)] %}
            {% endfor %}
            {{ ns.x }}
#
      - name: elpris_24h_30m
        unique_id: elpris_24h_30m
        state: >
          {{ states('sensor.elpris') }}
        #
        attributes:
          sälj_24h: >
            {% set ns = namespace(x=[]) %}
            {% for i in ((state_attr('sensor.elpris', 'raw_today') | map(attribute='value') | list + state_attr('sensor.elpris', 'raw_tomorrow') | map(attribute='value') | list)) %}
              {% set ns.x = ns.x + [i] %}
              {% set ns.x = ns.x + [i] %}
            {% endfor %}
            {{ ns.x }}
          köp_24h: >
            {% set ns = namespace(x=[]) %}
            {% for i in ((state_attr('sensor.electricity_price_sannesholma_2181_prices', 'today') | map(attribute='total') | list + state_attr('sensor.electricity_price_sannesholma_2181_prices', 'tomorrow') | map(attribute='total') | list)) %}
              {% set ns.x = ns.x + [i] %}
              {% set ns.x = ns.x + [i] %}
            {% endfor %}
            {{ ns.x }}
#
## Solcast forecast
      - name: solcast_pv_forecast
        unique_id: solcast_pv_forecast
        state_class: measurement
        state: >
          {{ states('sensor.solcast_pv_forecast_forecast_today') }}
        attributes:
#          pv_estimate: >
#            {% set ns = namespace(x=[]) %}
#            {% for i in ((state_attr('sensor.solcast_pv_forecast_forecast_today', 'detailedForecast') | map(attribute='pv_estimate') | list + state_attr('sensor.solcast_pv_forecast_forecast_tomorrow', 'detailedForecast') | map(attribute='pv_estimate') | list))[now().hour*2:][:48] %}
#              {% set ns.x = ns.x + [i | round(3) * 1000 ] %}
#            {% endfor %}
#            {{ ns.x }}
#
          pv_estimate: >
            {% set ns = namespace(x=[]) %}
            {% for i in ((state_attr('sensor.solcast_pv_forecast_forecast_today', 'detailedForecast') | map(attribute='pv_estimate') | list + state_attr('sensor.solcast_pv_forecast_forecast_tomorrow', 'detailedForecast') | map(attribute='pv_estimate') | list))[((now().hour*60 + now().minute) / 30) | int:] %}
              {% set ns.x = ns.x + [i | round(3) * 1000 ] %}
            {% endfor %}
            {{ ns.x }}
#
          pv_estimate_new: >
            {% set ns = namespace(x=[]) %}
            {% for i in ((state_attr('sensor.solcast_pv_forecast_forecast_today', 'detailedForecast') | map(attribute='pv_estimate') | list + state_attr('sensor.solcast_pv_forecast_forecast_tomorrow', 'detailedForecast') | map(attribute='pv_estimate') | list))[((now().hour*60 + now().minute) / 30) | int:][:48] %}
              {% set ns.x = ns.x + [i | round(3) * 1000 ] %}
            {% endfor %}
            {{ ns.x }}
# KOLLA
# To get long term statistics ##
      - name: p_pv_forecast_measure
        unique_id: p_pv_forecast_measure
        availability: >
          {{ is_number(states('sensor.p_pv_forecast')) }}
        unit_of_measurement: "W"
        state_class: measurement
        state: >
          {{ states('sensor.p_pv_forecast') }}
#
#### Forecast table #####
      - name: p_forecast
        unique_id: p_forecast
        availability: >
          {{ is_number(states('sensor.p_pv_forecast')) }}
        state: >
          {{ states('sensor.p_pv_forecast') }}
        attributes:
          date: >
            {{ state_attr('sensor.p_deferrable0', 'deferrables_schedule') | map(attribute='date') | list }}
          p_deferrable0: >
            {{ state_attr('sensor.p_deferrable0', 'deferrables_schedule') | map(attribute='p_deferrable0') | list }}
          p_deferrable1: >
            {{ state_attr('sensor.p_deferrable1', 'deferrables_schedule') | map(attribute='p_deferrable1') | list }}
          p_deferrable2: >
            {{ state_attr('sensor.p_deferrable2', 'deferrables_schedule') | map(attribute='p_deferrable2') | list }}
          p_pv_forecast: >
            {{ state_attr('sensor.p_pv_forecast', 'forecasts') | map(attribute='p_pv_forecast') | list }}
          p_load_forecast: >
            {{ state_attr('sensor.p_load_forecast', 'forecasts') | map(attribute='p_load_forecast') | list }}
          p_grid_forecast: >
            {{ state_attr('sensor.p_grid_forecast', 'forecasts') | map(attribute='p_grid_forecast') | list }}
          unit_prod_price: >
            {{ state_attr('sensor.unit_prod_price', 'unit_prod_price_forecasts') | map(attribute='unit_prod_price') | list }}
          unit_load_cost: >
            {{ state_attr('sensor.unit_load_cost', 'unit_load_cost_forecasts') | map(attribute='unit_load_cost') | list }}
          p_batt_forecast: >
            {{ state_attr('sensor.p_batt_forecast', 'battery_scheduled_power') | map(attribute='p_batt_forecast') | list }}
          soc_batt_forecast: >
            {{ state_attr('sensor.soc_batt_forecast', 'battery_scheduled_soc') | map(attribute='soc_batt_forecast') | list }}
          solcast_pv_forecast_forecast_today: >
            {% set length = state_attr('sensor.p_deferrable0', 'deferrables_schedule') | map(attribute='date') | list | length %}
            {{ (state_attr('sensor.solcast_pv_forecast_forecast_today', 'detailedForecast') | map(attribute='pv_estimate') | list)[now().hour:][:length]}}
          elpris: >
            {{(state_attr('sensor.elpris_24h_30m', 'sälj_24h') | list)[((now().hour*60 + now().minute) / 30) | int:]}}
#
      - name: solar_power_photovoltaics_emhass
        unique_id: solar_power_photovoltaics_emhass
        unit_of_measurement: "W"
        state_class: measurement
        device_class: power
        state: >
          {% if is_state('binary_sensor.heatpump_coldcircuitpump_state', 'off') and ( states('sensor.solar_power_photovoltaics') | float(0) > 100 ) %}
          {{ states('sensor.solar_power_photovoltaics') | float(0) + states('sensor.p_deferrable0') | float(0) }}
          {% else %}
          {{ states('sensor.solar_power_photovoltaics') | float(0) }}
          {% endif %}
#
      - name: emhass_def_current_state_debug
        unique_id: emhass_def_current_state_debug
        availability: >
          {{ is_number(states('sensor.p_deferrable0')) }}
        state: >
          {{'true' if states('sensor.p_deferrable0') | int > 0 else 'false' }}
#
  - binary_sensor:
      ### Kör kompressor
      - name: heatpump_emhass
        unique_id: heatpump_emhass
        availability: >
          {{ is_number(states('sensor.p_deferrable0')) and is_number(states('sensor.p_deferrable2')) }}
        state: >
          {{ states('sensor.p_deferrable0') | float('not_a_number') > 0 }}
#            or states('sensor.p_deferrable2') | float('not_a_number') > 0 }}
#
#
#
automation:
#
#
  - alias: EMHASS publicera data
    id: EMHASS publicera data
    trigger:
      - platform: homeassistant
        event: start
      - minutes: /1
        platform: time_pattern
    action:
      - service: shell_command.publish_data_def2
#
#
#
#
  - alias: EMHASS_forecast_mpc
    id: EMHASS_forecast_mpc
    trigger:
      - platform: time_pattern
        #
        minutes: /1
    action:
      - delay:
          seconds: 30
#      - condition: template
#        value_template: >
#          {{ states('sensor.p_deferrable2') | float(0) == 0
#            and states('sensor.p_deferrable0') | float(0) == 0 }}
      - service: shell_command.trigger_nordpool_solcast_mpc
#
#
  - alias: EMHASS_forecast_mpc_bil
    id: EMHASS_forecast_mpc_bil
    trigger:
      - platform: time_pattern
        #
        minutes: /1
    action:
      - delay:
          seconds: 30
      - service: shell_command.trigger_nordpool_solcast_mpc_bil
#
#
  - alias: solcast_update
    id: solcast_update
    trigger:
      - platform: time_pattern
        hours: "/3"
        minutes: 14
    action:
      - service: solcast_solar.update_forecasts
#
#{{ state_attr('sensor.p_deferrable0','deferrables_schedule') | map(attribute='p_deferrable0') | select('search', '2500.0') | list | count }}