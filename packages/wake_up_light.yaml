#
input_boolean:
  wake_up_light:
    name: V채ckning
    icon: mdi:sleep-off
#
  wake_up_light_sunrise:
    name: V채ckning vid soluppg책ng
    icon: mdi:sleep-off
# 
input_datetime:
  wake_up_light_time:
    name: V채ckningstid
    has_date: false
    has_time: true
#
template:
  - sensor:
    #
    - name: wake_up_light_time_to_wake
      unique_id: wake_up_light_time_to_wake
      device_class: timestamp
      state: >
        {{ ( as_timestamp(now().replace(hour=0, minute=0, second=0, microsecond=0) + timedelta(days=1)) + state_attr('input_datetime.wake_up_light_time', 'timestamp') ) | timestamp_utc }}
#{{ ( as_timestamp(now().replace(hour=0, minute=0, second=0, microsecond=0)) + state_attr('input_datetime.wake_up_light_time', 'timestamp') ) | timestamp_local }}
#{{ state_attr('input_datetime.wake_up_light_time', 'timestamp') | timestamp_custom(%c) }}
#{{ ( state_attr('input_datetime.wake_up_light_time', 'timestamp') - (now().second + now().minute * 60 + now().hour * 60 * 60)) }}
#{{ ( state_attr('input_datetime.wake_up_light_time', 'timestamp') - (now().second + now().minute * 60 + now().hour * 60 * 60)) | timestamp_custom('%H:%M', False) }}
    - name: sunrise_tomorrow
      unique_id: sunrise_tomorrow
      device_class: timestamp
      state: >
        {{ state_attr('sensor.sunrise', 'tomorrow') }}
#
  - binary_sensor:
    #
    - name: wake_up_light_time
      unique_id: wake_up_light_time
      state: >
        {{ ( states('sensor.time') == (state_attr('input_datetime.wake_up_light_time', 'timestamp') | int | timestamp_custom('%H:%M', False)) )
          and ( states('input_boolean.wake_up_light') == 'on' ) }}
#
    - name: wake_up_light_sunrise
      unique_id: wake_up_light_sunrise
      state: >
        {{ ( now().replace(second=0, microsecond=0).timestamp() | round(0) == (states('sensor.sunrise') | as_datetime ).replace(second=0, microsecond=0).timestamp() | round(0) )
          and ( states('input_boolean.wake_up_light_sunrise') == 'on' ) }}
#{{ ( now().timestamp() | round(0) == states('sensor.sunrise') | as_timestamp | round(0) ) }}
#
automation:
############# Automation #######################################
- alias: "Wake up light"
  trigger:
  - platform: state
    to: 'on'
    entity_id: binary_sensor.wake_up_light_time
  - platform: state
    to: 'on'
    entity_id: binary_sensor.wake_up_light_sunrise
  condition:
  - condition: state
    entity_id: input_boolean.sovdags
    state: 'on'
  action:
    - service: switch.turn_off
      entity_id: switch.adaptive_lighting_sovrum
    #
#    - service: input_boolean.turn_off
#      entity_id:
#      - input_boolean.wake_up_light
    #
    - service: light.turn_on
      data:
        entity_id: light.wake_up
        kelvin: 2000
        brightness: 1
    - delay:
        seconds: 1
    - service: light.turn_on
      data:
        entity_id: light.wake_up
        kelvin: 4000
        brightness_pct: 100
        transition: 1800
#    - service: switch.turn_on
#      entity_id: switch.adaptive_lighting_sovrum
