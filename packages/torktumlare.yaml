utility_meter:
  torktumlare_timme:
    source: sensor.torktumlare_consumption
    cycle: hourly
  torktumlare_dag:
    source: sensor.torktumlare_consumption
    cycle: daily
  torktumlare_vecka:
    source: sensor.torktumlare_consumption
    cycle: weekly
  torktumlare_manad:
    source: sensor.torktumlare_consumption
    cycle: monthly
  torktumlare_ar:
    source: sensor.torktumlare_consumption
    cycle: yearly
  #
  torktumlare_dag_kostnad:
    source: sensor.torktumlare_timme_kostnad
    cycle: daily
  torktumlare_manad_kostnad:
    source: sensor.torktumlare_timme_kostnad
    cycle: monthly
  torktumlare_ar_kostnad:
    source: sensor.torktumlare_timme_kostnad
    cycle: yearly
#
#sensor:
#  - platform: template
#    sensors:
      ###
#      torktumlare_timme_kostnad:
#        friendly_name: "Kostnad"
#        unit_of_measurement: "SEK"
#        value_template: "{{ ( states('sensor.torktumlare_timme') | float(0.0) * states('sensor.elpris_totalt_sek') | float(0.0) ) | round(3) }}"
#
template:
  - sensor:
      # Torktumlare
      - name: torktumlare_timme_kostnad
        unique_id: torktumlare_timme_kostnad
        unit_of_measurement: "SEK"
#        state_class: measurement
        device_class: monetary
        availability: "{{ is_number(states('sensor.torktumlare_timme')) and is_number(states('sensor.elpris_totalt_sek')) }}"
        state: "{{ ( states('sensor.torktumlare_timme') | float(0.0) * states('sensor.elpris_totalt_sek') | float(0.0) ) | round(3) }}"
#
binary_sensor:
# Determine when the washing machine has a load running.
  - platform: template
    sensors:
      torktumlare:
        friendly_name: Torktumlare
        delay_on:
          seconds: 10
        delay_off:
          minutes: 2
        value_template: >-
          {{ states('sensor.torktumlare_power') | float(0.0) > 1 }}
        icon_template: mdi:tumble-dryer