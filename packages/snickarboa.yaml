################# Circadian ##############################################
adaptive_lighting:
  #
  - name: Snickarboa
    lights:
      - light.snickarboa_arbetsbank
    prefer_rgb_color: false
    transition: 45
    initial_transition: 5
    interval: 90
    min_brightness: 1
    max_brightness: 100
#    min_color_temp: 2100
#    max_color_temp: 4000
    sleep_brightness: 1
    sleep_color_temp: 2000
    #sunrise_time: "07:00:00" # override the sunrise time
    #    sunrise_offset: -00:05:00
    #    sunset_time: '20:00'
    #    sunset_offset: 1800  # in seconds or '00:15:00'
    # If another source calls light.turn_on while the lights are on and being adapted, disable Adaptive Lighting.
    take_over_control: true
    detect_non_ha_changes: false
    # Whether to keep adapting the lights (false) or to only adapt the lights as soon as they are turned on (true).
    only_once: false
#
#
#generic_hygrostat:
#  - name: Snickarboa
#    humidifier: input_boolean.avfuktare
#    target_sensor: sensor.snickarboa_humidity
#    device_class: "dehumidifier"
#    max_humidity: 75
#
climate:
  - platform: generic_thermostat
    name: Snickarboa
    precision: 0.1
    heater: input_boolean.snickarboa_heater
    target_sensor: sensor.snickarboa_temperature
    min_temp: 0
#
#switch.avfuktare
input_boolean:
  avfuktare:
    name: Avfuktare
    #
  snickarboa_heater:
    name: Snickarboa värmare
#
sensor:
  - platform: integration
    source: sensor.avfuktare_power
    name: Avfuktare_consumption
    unit_prefix: k
    round: 2
    method: left
    #
#
  - platform: history_stats
    name: snickarboa_heater_today
    entity_id: switch.motorvarmare
    state: "on"
    type: time
    start: "{{ now().replace(hour=0, minute=0, second=0, microsecond=0) }}"
    end: "{{ now().replace(microsecond=0) }}"
#
utility_meter:
  avfuktare_timme:
    source: sensor.avfuktare_consumption
    cycle: hourly
  avfuktare_dag:
    source: sensor.avfuktare_consumption
    cycle: daily
  avfuktare_vecka:
    source: sensor.avfuktare_consumption
    cycle: weekly
  avfuktare_manad:
    source: sensor.avfuktare_consumption
    cycle: monthly
  avfuktare_ar:
    source: sensor.avfuktare_consumption
    cycle: yearly
  #
  avfuktare_dag_kostnad:
    source: sensor.avfuktare_timme_kostnad
    cycle: daily
  avfuktare_manad_kostnad:
    source: sensor.avfuktare_timme_kostnad
    cycle: monthly
  avfuktare_ar_kostnad:
    source: sensor.avfuktare_timme_kostnad
    cycle: yearly
#####
  snickarboa_heater_timme:
    source: sensor.snickarboa_heater_consumption
    cycle: hourly
  snickarboa_heater_dag:
    source: sensor.snickarboa_heater_consumption
    cycle: daily
  snickarboa_heater_vecka:
    source: sensor.snickarboa_heater_consumption
    cycle: weekly
  snickarboa_heater_manad:
    source: sensor.snickarboa_heater_consumption
    cycle: monthly
  snickarboa_heater_ar:
    source: sensor.snickarboa_heater_consumption
    cycle: yearly
  #
  snickarboa_heater_dag_kostnad:
    source: sensor.snickarboa_heater_timme_kostnad
    cycle: daily
  snickarboa_heater_manad_kostnad:
    source: sensor.snickarboa_heater_timme_kostnad
    cycle: monthly
  snickarboa_heater_ar_kostnad:
    source: sensor.snickarboa_heater_timme_kostnad
    cycle: yearly
#
input_number:
  snickarboa_light_level:
    name: Ljusstyrka snickarboa för belysning
    min: 0
    max: 1000
    step: 10
    unit_of_measurement: lx
    icon: mdi:lightbulb-on
#
template:
  - binary_sensor:
      - name: "Avfuktare"
        unique_id: avfuktare
        state: >
          {{ is_state('input_boolean.avfuktare', 'on')
          and is_state('binary_sensor.elpris_cheap', 'on') }}
#
      - name: snickarboa_heater
        unique_id: snickarboa_heater
        state: >
          {{ is_state('input_boolean.snickarboa_heater', 'on')
          and is_state('binary_sensor.electricity_price_sannesholma_2181_max_3', 'off') }}
#
      ### Light level
      - name: snickarboa_lightlevel
        unique_id: snickarboa_lightlevel
        device_class: light
        delay_on:
          minutes: 10
        state: >-
          {{ states('sensor.snickarboa_hue_motion_sensor_light_level') | float > states('input_number.snickarboa_light_level') | float }}
      #
      # Belysning närvaro
      - name: snickarboa_presence_light_automation_control
        unique_id: snickarboa_presence_light_automation_control
        state: >-
          {{ is_state('binary_sensor.snickarboa_presence', 'on')
            and is_state('binary_sensor.snickarboa_lightlevel', 'off') }}
            
      ### Närvaro
      - name: snickarboa_presence
        unique_id: snickarboa_presence
        device_class: motion
        delay_off:
          minutes: 10
        state: >-
          {{ is_state('binary_sensor.snickarboa_hue_motion_sensor_motion', 'on') }}
      #
#
  - sensor:
    ### Förbrukning
    - name: snickarboa_heater_consumption
      unique_id: snickarboa_heater_consumption
      unit_of_measurement: "kWh"
      state_class: total_increasing
      device_class: energy
      availability: "{{ is_number(states('sensor.snickarboa_heater_today')) }}"
      state: >
        {{ ( 1200.0 * states('sensor.snickarboa_heater_today') | float('nan') / 1000.0 ) | round(3) }}
#
      ###
    - name: avfuktare_timme_kostnad
      unique_id: avfuktare_timme_kostnad
      unit_of_measurement: "SEK"
      availability: "{{ is_number(states('sensor.avfuktare_timme')) and is_number(states('sensor.elpris_totalt_sek')) }}"
      state: "{{ ( states('sensor.avfuktare_timme') | float(0.0) * states('sensor.elpris_totalt_sek') | float(0.0) ) | round(3) }}"
      ###
    - name: snickarboa_heater_timme_kostnad
      unique_id: snickarboa_heater_timme_kostnad
      unit_of_measurement: "SEK"
      availability: "{{ is_number(states('sensor.snickarboa_heater_timme')) and is_number(states('sensor.elpris_totalt_sek')) }}"
      state: "{{ ( states('sensor.snickarboa_heater_timme') | float(0.0) * states('sensor.elpris_totalt_sek') | float(0.0) ) | round(3) }}"
#
automation:
  #
  - alias: Avfuktare
    trigger:
      - platform: state
        entity_id: binary_sensor.avfuktare
      - platform: homeassistant
        event: start
    action:
      - service: >
          {% if is_state('binary_sensor.avfuktare', 'on') %}
          switch.turn_on
          {% elif is_state('binary_sensor.avfuktare', 'off') %}
          switch.turn_off
          {% endif %}
        entity_id:
          - switch.avfuktare
  #
  - alias: Snickarboa värmare
    trigger:
      - platform: state
        entity_id: binary_sensor.snickarboa_heater
      - platform: homeassistant
        event: start
    action:
      - service: >
          {% if is_state('binary_sensor.snickarboa_heater', 'on') %}
          switch.turn_on
          {% elif is_state('binary_sensor.snickarboa_heater', 'off') %}
          switch.turn_off
          {% endif %}
        entity_id:
          - switch.motorvarmare
    #
  - alias: Snickarboa belysning
    trigger:
    - platform: state
      entity_id: binary_sensor.snickarboa_presence_light_automation_control
    - platform: homeassistant
      event: start
    action:
    - service: >
        {% if is_state('binary_sensor.snickarboa_presence_light_automation_control', 'on') %}
        light.turn_on
        {% elif is_state('binary_sensor.snickarboa_presence_light_automation_control', 'off') %}
        light.turn_off
        {% endif %}
      entity_id:
      - light.snickarboa_arbetsbank
#
homeassistant:
  customize:
    sensor.avfuktare_consumption:
      friendly_name: Avfuktare
    sensor.snickarboa_heater_consumption:
      friendly_name: Snickarboa värmare
    sensor.snickarboa_heater_dag:
      friendly_name: Snickarboa värmare